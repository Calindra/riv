## primtypes.number = primtypes.float32
-- ## primtypes.integer = primtypes.int32

require 'riv'
require 'math'

local SIZE <comptime> = 256

function math.fastfloor(x: number) <inline>
  local i = int64(x)
  return i - (x < i and 1 or 0)
end

function math.linearstep(a: auto, b: auto, x: auto) <inline>
  return math.clamp((x-a)/(b-a), 0, 1)
end

function math.qsin(x: number): number <inline>
  -- Quadratic sin approximation (imprecise), using the following constrains:
  -- f(0) = 0, f(pi) = 0, f(pi/2) = 1
  local line = x--*#[1/math.pi]#
  local stair = math.fastfloor(line)
  local saw = line - stair
  local wave = 4.0*saw*(1.0-saw)
  local signal = (1.0-2.0*(stair - 2.0*math.fastfloor(0.5*line)))
  return signal*wave
end

function math.fastexp4(x: number): number <inline>
  x = 1.0 + x * (1.0 / 17.0)
  local t = x
  ## for i=1,4 do
    t=t*t
  ## end
  return math.max(t*x,0.0)
end

local function sd_circle(x: number, y: number, r: number): number <inline>
  return math.sqrt(x*x+y*y) - r
end

local function main_image(x: number, y: number, t: number): uint8 <inline>
  local d = sd_circle(x, y, 0.5)

  -- coloring
  local c = d > 0 and 1 or 0.5
  c = c * (1 - math.fastexp4(-6*math.abs(d)))
  c = c * (0.8 + 0.2*math.qsin(50.0*d + 3.0*t))
  return uint8(c*255)
end

local function draw() <noinline>
  local a = riv_rdcycle()
  local fb: auto= (@*[SIZE][SIZE]byte)(riv.framebuffer)
  local t: number = riv.time
  for y:usize=0,<SIZE do
    for x:usize=0,<SIZE do
      fb[y][x] = main_image(x/(SIZE//2) - 1, y/(SIZE//2) - 1, t)
    end
  end
  print((riv_rdcycle()-a)/(SIZE*SIZE))
end

riv.width = SIZE
riv.height = SIZE
riv.target_fps = 24
for col=0,<256 do
  riv.palette[col] = (col << 16) | (col << 8) | (col << 0)
end
repeat draw() until not riv_present()
