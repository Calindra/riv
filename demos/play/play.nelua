## primtypes.number = primtypes.float32
-- ## primtypes.integer = primtypes.int32

require 'riv'
require 'math'

local function memset(s: pointer, c: int32, n: usize): pointer <cimport,cinclude'<string.h>'> end

local function riv_get_clip_limits(): (int64, int64, int64, int64, int64) <inline>
  local fw: int64, fh: int64 = riv.width, riv.height
  local cx0: int64, cy0: int64 = math.max(0, riv.draw.clip.x), math.max(0, riv.draw.clip.y)
  local cx1: int64, cy1: int64 = math.min(fw, riv.draw.clip.x + riv.draw.clip.width) - 1, math.min(fh, riv.draw.clip.y + riv.draw.clip.height) - 1
  return cx0, cy0, cx1, cy1, fw
end

local mask: uint32 = 0xffffffff

global function riv_draw_circle_fill2(ox: int64, oy: int64, d: int64, col: uint32): void <cexport>
  if unlikely(d <= 0) then return end
  ox = ox - riv.draw.origin.x
  oy = oy - riv.draw.origin.y
  local co: uint8 = (@uint8)(col)
  if riv.draw.pal_enabled then co = riv.draw.pal[co] end
  local fb: *[0]uint8 = &riv.framebuffer[0]
  local cx0: int64, cy0: int64, cx1: int64, cy1: int64, fw: int64 = riv_get_clip_limits()
  local sr: int64 = (d + 1) %%% 2
  local r: int64 = d /// 2
  local r2: int64 = r*r + math.max(r-1+sr, 0)
  local comsk: uint32 = mask
  co = co & comsk
  for iry: int64=sr,r,1 do
    local iy0: int64, iy1: int64 = oy - iry + sr, oy + iry
    local iy0v: boolean = iy0 >= cy0 and iy0 <= cy1
    local iy1v: boolean = iy1 >= cy0 and iy1 <= cy1 and iy0 ~= iy1
    if iy0v or iy1v then
      local erx: int64 = math.ifloor(math.sqrt((@float32)(r2 - iry*iry)))
      local ix0: int64 = math.max(ox - erx + sr, cx0)
      local ix1: int64 = math.min(ox + erx, cx1)
      if ix1 >= ix0 then
        if iy0v then
          for ix: int64=ix0,ix1 do
            local i = iy0*fw + ix
            fb[i] = (uint32(fb[i]) & ~comsk) | co
          end
        end
        if iy1v then
          for ix: int64=ix0,ix1 do
            local i = iy1*fw + ix
            fb[i] = (uint32(fb[i]) & ~comsk) | co
          end
        end
      end
    end
  end
end


-- disco skull
-- by zep
-- skull sprite
local data: []byte ={0,252,254,255,255,231,195,195,195,199,255,127,126,248,248,152,152}


local function cos(x: number)
    return math.cos(x*(math.pi*2))
end

local function sin(x: number)
    return -math.sin(x*(math.pi*2))
end

local function flr(x: number)
  local i = int64(x)
  return i - (x < i and 1 or 0)
end

-- 2d rotation
local function rot(x:number,y:number,a:number)
  return cos(a)*x-sin(a)*y, cos(a)*y+x*sin(a)
end

local function draw()
  --printh("_draw() start "..stat(1))
  riv_clear(0)

  local t = riv.time
  local tt=t
  local r0 = 5+cos(tt/5)*4
  local y_offset = .5+cos(tt*.11)*.5

  for i=0,5 do
    local p=i//3

    -- decide which bitplanes to read/write
    -- poke(0x5509, (1<<i%3) | (0x8 * p))
    mask = (1<<i%3) | (0x8 * p)
    local a2=t-i%6/20


    for i=0,255 do
      local x=i&15
      -- i%16 is the spr pixel x
      -- i/16 is the spr pixel y
      if x>7 then x= 15-x end -- rhs of sprite
      if data[1+i//16]&(1<<x)>0 then
        -- rotate in object space
        local x,z=rot(i%16/8-1,0,a2/4)
        local x,y=rot(x,i/128-1,cos(tt*.1)*.0833)
        y = y - y_offset
        -- move
        z = z + 2+cos(tt*.142)

        -- dot is above surface
        if y<.5 then

          -- on reflection pass, reflect
          -- through ground plane (at 1)
          if p==0 then y = 1-y end

          -- perspective projection into screenspace (sx,sy)
          local sx = 240 + x * 128 / z
          local sy = 135 + y * 128 / z

          -- r: radius of dot
          -- i%16/9+i/99 for stripes
          -- +a2 to vary stripes offset
          local r = (r0+cos(i%16/9+i/99+a2)*2) / z

          -- draw the dot
          riv_draw_circle_fill2(sx,sy,math.max(2*r,1),15)
          --circ(sx,sy,r*1.5,15)
        end
      end
    end
  end
  -- riv_draw_rect_fill(0,0,50,10,16)
  -- print(string.format("%.3f (%d fps)",stat(1), stat(7)),2,2,15)
  --printh("_draw() end "..stat(1))
end

local function init()
  -- palette
  for i=0,15 do

    local r = (i>>0)&1
    local g = (i>>1)&1
    local b = (i>>2)&1
    local q = (i>>3)&1

    local q0 = (q * 1.5) + 0.5  -- 0.5 or 2.0
    local q1 = (q * 1.0) + 1.0  -- 1.0 or 2.0

    local val = flr(b * 127 * q1)
    val = val + (flr(g * 127 * q0) << 8)
    val = val + (flr(r * 127 * q0) << 16)

    riv.palette[i] = val
  end
end

riv.width = 480
riv.height = 270
riv.target_fps = 60
init() repeat draw() until not riv_present()
