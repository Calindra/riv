require 'riv'
require 'math'
require 'string'

-- Game types
local Point2D = @record{x: int32, y: int32}
local Direction = @enum(byte){NONE=0, UP, DOWN, RIGHT, LEFT}
local Color = @byte

-- Game constants
local MAX_GRID_SIZE <comptime> = 128
local SCREEN_SIZE <comptime> = 128

-- Game parameters
local grid_size: uint32 = 16
local tile_size: int64 = SCREEN_SIZE/grid_size
local speed: int64 = 8
local apple_score: int64 = 32
local time_penality: int64 = 1

do -- parse game parameters
  local i = 1
  while i < argc do
    if argv[i] == '-size' then
      grid_size = math.clamp(1 << tointeger(argv[i+1]), 2, 128)
      tile_size = SCREEN_SIZE/grid_size
      i = i + 2
    elseif argv[i] == '-speed' then
      speed = math.clamp(tointeger(argv[i+1]), 1, 60)
      i = i + 2
    elseif argv[i] == '-apple-score' then
      apple_score = tointeger(argv[i+1])
      i = i + 2
    elseif argv[i] == '-time-penality' then
      time_penality = tointeger(argv[i+1])
      i = i + 2
    else
      error 'unknown argument'
    end
  end
end

local tile_size: int64 = SCREEN_SIZE/grid_size

-- Game state variables
local headpos: Point2D, tailpos: Point2D, applepos: Point2D
local score: int64
local max_score: int64
local moves: uint64
local frames: uint64
local apples: uint64
local movedir: Direction
local tiles: [SCREEN_SIZE][SCREEN_SIZE]Direction
local last_turn_frame: uint64
local finish_frames: uint64
local finished: boolean
local started: boolean

local function move_point(pos: Point2D, dir: Direction)
  switch dir
  case Direction.UP then
    pos.y = pos.y - 1
  case Direction.DOWN then
    pos.y = pos.y + 1
  case Direction.RIGHT then
    pos.x = pos.x + 1
  case Direction.LEFT then
    pos.x = pos.x - 1
  end
  return pos
end

local function set_tile(pos: Point2D, dir: Direction)
  tiles[pos.x][pos.y] = dir
end

local function reset_tile(pos: Point2D)
  tiles[pos.x][pos.y] = Direction.NONE
end

local function get_tile(pos: Point2D)
  return tiles[pos.x][pos.y]
end

local function has_tile(pos: Point2D)
  return tiles[pos.x][pos.y] ~= Direction.NONE
end

local function respawn_apple()
  -- return when there is not enough space to spawn anymore
  if apples + 2 >= grid_size * grid_size then return end
  -- respawn until there is no collision with its body
  repeat
    applepos = Point2D{
      x = riv_rand_uint(grid_size-1),
      y = riv_rand_uint(grid_size-1)
    }
  until not has_tile(applepos)
end

local function save_score()
  local finished_str: string = finished and 'true' or 'false'
  riv.outcard_len = riv_snprintf(&riv.inoutbuffer[0], RIV_MMIOSIZE_INOUTBUFFER,
    [[JSON{"score":%d,"max_score":%d,"apples":%u,"moves":%u,"frames":%u,"finished":%s}]],
      score, max_score, apples, moves, frames, finished_str)
  riv_printf("%s\n", (@cstring)(&riv.inoutbuffer[0]))
end

local function init_game()
  tiles = {}
  headpos = Point2D{x=grid_size//2, y=grid_size//2}
  tailpos = Point2D{x=headpos.x,    y=headpos.y+1}
  movedir = Direction.UP
  score = 0
  frames = 0
  moves = 0
  started = true
  finished = false
  set_tile(headpos, Direction.UP)
  set_tile(tailpos, Direction.UP)
  respawn_apple()
  riv_waveform(riv_waveform_desc{
    type = RIV_WAVEFORM_SQUARE,
    attack = 0.01,
    decay = 0.01,
    sustain = 0.1,
    release = 0.01,
    start_frequency = 220,
    end_frequency = 220*3,
    amplitude = 0.2,
    sustain_level = 0.5,
  })
  riv_printf('[SNAKE] NEW GAME\n')
end

local function game_over()
  riv_waveform(riv_waveform_desc{
    type = RIV_WAVEFORM_SQUARE,
    attack = 0.01,
    decay = 0.01,
    sustain = 0.1,
    release = 0.01,
    start_frequency = 220,
    end_frequency = 220*0.5,
    amplitude = 0.2,
    sustain_level = 0.5,
  })
  finished = true
  riv_printf('[SNAKE] GAME OVER\n')
end

local function check_turn(keycode: uint8, dir: Direction, turned: boolean)
  if riv.keys[keycode].press or (not turned and riv.keys[keycode].down) then
    local headdir = get_tile(headpos)
    switch dir do
    case Direction.UP then if headdir == Direction.DOWN then return false end
    case Direction.DOWN then if headdir == Direction.UP then return false end
    case Direction.LEFT then if headdir == Direction.RIGHT then return false end
    case Direction.RIGHT then if headdir == Direction.LEFT then return false end
    else return false end
    movedir = dir
    return true
  end
  return false
end

local function poll_keys()
  local turned = false
  turned = turned or check_turn(RIV_GAMEPAD_UP, Direction.UP, turned)
  turned = turned or check_turn(RIV_GAMEPAD_DOWN, Direction.DOWN, turned)
  turned = turned or check_turn(RIV_GAMEPAD_RIGHT, Direction.RIGHT, turned)
  turned = turned or check_turn(RIV_GAMEPAD_LEFT, Direction.LEFT, turned)
  if turned then
    moves = moves + 1
  end
end

local function poll_game()
  -- move the head
  set_tile(headpos, movedir)
  headpos = move_point(headpos, movedir)

  -- check collision with map boundaries
  if headpos.x >= grid_size or headpos.y >= grid_size or
     headpos.x < 0 or headpos.y < 0 then
    game_over()
    return
  end

  -- check collisions with its body
  if has_tile(headpos) then
    game_over()
    return
  end

  -- place head on next tile
  set_tile(headpos, movedir)

  -- check collision with apple
  if headpos.x == applepos.x and headpos.y == applepos.y then
    apples = apples + 1
    score = score + apple_score
    if score > max_score then
      max_score = score
    end
    respawn_apple()
    riv_waveform(riv_waveform_desc{
      type = RIV_WAVEFORM_SQUARE,
      attack = 0.01,
      decay = 0.01,
      sustain = 0.1,
      release = 0.01,
      start_frequency = 220,
      end_frequency = 220*3,
      amplitude = 0.2,
      sustain_level = 0.5,
    })
  else
    -- decrease score
    score = score - time_penality
    -- eat tail
    local taildir = get_tile(tailpos)
    reset_tile(tailpos)
    tailpos = move_point(tailpos, taildir)
  end
end

local function draw_apple()
  riv_draw_rect_fill(applepos.x*tile_size, applepos.y*tile_size, tile_size, tile_size, RIV_COLOR_LIGHTRED)
end

local function draw_snake()
  for x=0,<grid_size do
    for y=0,<grid_size do
      local pos = Point2D{x=x,y=y}
      if has_tile(pos) then -- snake is present at this tile
        riv_draw_rect_fill(pos.x*tile_size, pos.y*tile_size, tile_size, tile_size, RIV_COLOR_LIGHTGREEN)
      end
    end
  end
end

local function draw_intro()
  local col: uint32 = riv.frame % 2 == 0 and RIV_COLOR_LIGHTRED or RIV_COLOR_DARKRED
  riv_draw_text("snake", RIV_SPRITESHEET_FONT_5X7, (128 - 58)//2, 50, RIV_COLOR_LIGHTGREEN, 2, 2, 2, 2)
  riv_draw_text("PRESS TO START", RIV_SPRITESHEET_FONT_5X7, (128 - 83)//2, 70, col, 1, 1, 1, 1)
end

local function draw_game_over()
  riv_draw_text("GAME OVER", RIV_SPRITESHEET_FONT_5X7, (128 - 106)//2, (128 - 14)//2, RIV_COLOR_RED, 2, 2, 2, 2)
  finish_frames = finish_frames + 1
  if finish_frames > speed then
    riv.quit = true
  end
end

local function draw()
  riv_clear_screen(RIV_COLOR_DARKSLATE)
  if started then
    draw_apple()
    draw_snake()
    if finished then
      draw_game_over()
    end
  else
    draw_intro()
  end
end

local function update()
  if not started then
    if riv.keys[RIV_GAMEPAD_UP].press or
     riv.keys[RIV_GAMEPAD_DOWN].press or
     riv.keys[RIV_GAMEPAD_LEFT].press or
     riv.keys[RIV_GAMEPAD_RIGHT].press or
     riv.keys[RIV_GAMEPAD_A1].press or
     riv.keys[RIV_GAMEPAD_A2].press or
     riv.keys[RIV_GAMEPAD_A3].press or
     riv.keys[RIV_GAMEPAD_A4].press or
     riv.keys[RIV_GAMEPAD_START].press then
    init_game()
    end
  end
  if started and not finished then
    poll_keys()
    poll_game()
    save_score()
    frames = frames + 1
  end
end

local function frame()
  update()
  draw()
end

local function init()
  riv.framebuffer_desc.width = SCREEN_SIZE
  riv.framebuffer_desc.height = SCREEN_SIZE
  riv.framebuffer_desc.target_fps = speed
  riv.framebuffer_desc.pixel_format = RIV_PIXELFORMAT_PLT256
  save_score()
end

init()
repeat frame() until not riv_present()

## nostartfiles(true)
