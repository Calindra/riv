## pragmas.unitname = ''

require 'linux'
require '.riv_types'

global riv_yield_request: type = @record{
  dev: uint8,
  mode: uint8,
  reason: uint16,
  data: uint32,
}

-- Open yield device.
global function riv_yield_open(): void
  local no_yield_str: string = getenv('RIV_NO_YIELD')
  if no_yield_str == 'y' then return end
  riv.yield_fd = open("/dev/yield", O_RDWR, 0)
  assert(riv.yield_fd > 0, 'open yield device failed')
  riv.yielding = true
end

-- Close yield device.
global function riv_yield_close(): void
  if riv.yield_fd <= 0 then return end
  assert(close(riv.yield_fd) >= 0, 'close yield fd failed')
end

-- Suspend execution for the host to handle an event.
global function riv_yield(command: riv_control_command): void
  if riv.yield_fd <= 0 then return end
  local IOCTL_YIELD: usize <comptime> = 0xc008d100
  local HTIF_DEVICE_YIELD: uint8 <comptime> = 2
  local HTIF_YIELD_AUTOMATIC: uint8 <comptime> = 0
  local HTIF_YIELD_REASON_PROGRESS: uint8 <comptime> = 0
  local swap_yield_req: riv_yield_request = {
    dev = HTIF_DEVICE_YIELD,
    mode = HTIF_YIELD_AUTOMATIC,
    reason = HTIF_YIELD_REASON_PROGRESS,
    data = command,
  }
  assert(ioctl(riv.yield_fd, IOCTL_YIELD, (@usize)(&swap_yield_req)) == 0, 'yield ioctl failed')
end
