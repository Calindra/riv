## pragmas.unitname = ''

require 'linux'
require 'memory'
require '.riv_types'

global function riv_sync_incard(): void <noinline>
  riv.incard_len = riv.mmio_device.incard_len & (@uint32)(RIV_MMIOSIZE_INOUTBUFFER-1)

  -- retrieve input card from fd
  local fd_str: string = getenv('RIV_INCARD_FD')
  if #fd_str > 0 then
    local fd: int32 = fd_str.data[0] - '0'_b
    local size: isize = lseek(fd, 0, SEEK_END)
    assert(size >= 0 and size < RIV_MMIOSIZE_INOUTBUFFER, 'invalid incard fd size')
    if size > 0 then
      local ptr: pointer = mmap(nilptr, (@usize)(size), PROT_READ, MAP_SHARED, fd, 0)
      assert(ptr ~= MAP_FAILED, 'incard fd mmap failed')
      memory.copy(riv.inoutbuffer, ptr, (@usize)(size))
      munmap(ptr, (@usize)(size))
    end
    riv.incard_len = (@uint32)(size)
  end
end

global function riv_sync_outcard(): void <noinline>
  riv.mmio_driver.outcard_len = riv.outcard_len

  -- save output card to fd
  local fd_str: string = getenv('RIV_OUTCARD_FD')
  if #fd_str > 0 then
    local fd: int32 = fd_str.data[0] - '0'_b
    assert(lseek(fd, 0, SEEK_SET) == 0, 'outcard lseek failed')
    assert(write(fd, riv.inoutbuffer, riv.outcard_len) == riv.outcard_len, 'outcard write failed')
    assert(ftruncate(fd, riv.outcard_len) == 0, 'outcard ftruncate failed')
  end
end
