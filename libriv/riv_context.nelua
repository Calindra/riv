require 'memory'
require 'linux'

require '.riv_types'
require '.riv_prng'

local span_uint8: type = @span(uint8)

local riv_yield_request: type = @record{
  dev: uint8,
  mode: uint8,
  reason: uint16,
  data: uint32,
}

function riv_context:_init_default_palette(): void
  self.mmio_driver.palette[RIV_PAL16_BLACK] = RIV_RGB_PAL16_BLACK
  self.mmio_driver.palette[RIV_PAL16_DARKBLUE] = RIV_RGB_PAL16_DARKBLUE
  self.mmio_driver.palette[RIV_PAL16_DARKPURPLE] = RIV_RGB_PAL16_DARKPURPLE
  self.mmio_driver.palette[RIV_PAL16_DARKGREEN] = RIV_RGB_PAL16_DARKGREEN
  self.mmio_driver.palette[RIV_PAL16_BROWN] = RIV_RGB_PAL16_BROWN
  self.mmio_driver.palette[RIV_PAL16_DARKGREY] = RIV_RGB_PAL16_DARKGREY
  self.mmio_driver.palette[RIV_PAL16_LIGHTGREY] = RIV_RGB_PAL16_LIGHTGREY
  self.mmio_driver.palette[RIV_PAL16_WHITE] = RIV_RGB_PAL16_WHITE
  self.mmio_driver.palette[RIV_PAL16_RED] = RIV_RGB_PAL16_RED
  self.mmio_driver.palette[RIV_PAL16_ORANGE] = RIV_RGB_PAL16_ORANGE
  self.mmio_driver.palette[RIV_PAL16_YELLOW] = RIV_RGB_PAL16_YELLOW
  self.mmio_driver.palette[RIV_PAL16_GREEN] = RIV_RGB_PAL16_GREEN
  self.mmio_driver.palette[RIV_PAL16_BLUE] = RIV_RGB_PAL16_BLUE
  self.mmio_driver.palette[RIV_PAL16_LAVENDER] = RIV_RGB_PAL16_LAVENDER
  self.mmio_driver.palette[RIV_PAL16_PINK] = RIV_RGB_PAL16_PINK
  self.mmio_driver.palette[RIV_PAL16_LIGHTPEACH] = RIV_RGB_PAL16_LIGHTPEACH
end

function riv_context:_ctl(reason: riv_control_reason): void
  assert(self.mmio_driver, 'riv not initialized')
  local IOCTL_YIELD: usize <comptime> = 0xc008d100
  local HTIF_DEVICE_YIELD: uint8 <comptime> = 2
  local HTIF_YIELD_AUTOMATIC: uint8 <comptime> = 0
  local swap_yield_req: riv_yield_request = {
    dev = HTIF_DEVICE_YIELD,
    mode = HTIF_YIELD_AUTOMATIC,
    reason = reason,
    data = 0,
  }
  assert(ioctl(self.yield_fd, IOCTL_YIELD, (@usize)(&swap_yield_req)) == 0, 'yield ioctl failed')
end

function riv_context:_init_prng(argc: int32, argv: *[0]cstring): void
  local hash: [2]uint64 = {self.incard_format, self.incard_format}
  if self.incard_len > 0 then
    hash = murmur3_128(span_uint8{data=(self.inoutbuffer), size=self.incard_len}, hash)
  end
  if argc > 0 and argv ~= nilptr then
    for i: int32=1,<argc do
      if argv[i] ~= nilptr then
        hash = murmur3_128(span_uint8{data=(@*[0]byte)(argv[i]), size=#argv[i]}, hash)
      end
    end
  end
  self.prng:srand(hash[0], hash[1])
end

function riv_context:setup(argc: int32, argv: *[0]cstring): void <cexport'riv_setup'>
  memory.zero(self, #@riv_context)
  assert(not self.mmio_driver, 'riv already initialized')
  -- yield
  self.yield_fd = open("/dev/yield", O_RDWR, 0)
  assert(self.yield_fd > 0, 'open yield device failed')
  -- map memory
  assert(get_free_hugepages() == 1, 'no free hugepage')
  local prot: cint = PROT_READ | PROT_WRITE
  local flags: cint = MAP_ANONYMOUS | MAP_SHARED | MAP_FIXED_NOREPLACE | MAP_POPULATE | MAP_HUGETLB
  local mmio: pointer = (@pointer)(RIV_VADDR_BASE)
  assert(mmap(mmio, RIV_MEMSIZE_HUGEPAGE, prot, flags, -1, 0) == mmio, 'mmap failed')
  assert(get_free_hugepages() == 0, 'no used hugepage')
  -- initialize device
  memory.zero(mmio, RIV_MEMSIZE_HUGEPAGE)
  self.mmio_driver = (@*riv_mmio_driver)(RIV_VADDR_MMIO_DRIVER)
  self.mmio_device = (@*riv_mmio_device)(RIV_VADDR_MMIO_DEVICE)
  self.mmio_driver.header = {
    magic = RIV_DRIVER_MAGIC,
    version = RIV_VERSION,
    features = 0,
    uuid = riv_rdcycle()
  }
  self.mmio_driver.framebuffer_desc = {
    width = RIV_DEFAULT_WIDTH,
    height = RIV_DEFAULT_HEIGHT,
    fps = RIV_DEFAULT_FPS,
    pixel_format = RIV_DEFAULT_PIXELFORMAT,
  }
  self.inoutbuffer = (@*[RIV_MEMSIZE_INOUTBUFFER]byte)(RIV_VADDR_INOUTBUFFER)
  self.framebuffer = (@*[RIV_MEMSIZE_FRAMEBUFFER]byte)(RIV_VADDR_FRAMEBUFFER)
  self.audiobuffer = (@*[RIV_MEMSIZE_AUDIOBUFFER]byte)(RIV_VADDR_AUDIOBUFFER)
  -- aliases
  self.framebuffer_desc = &self.mmio_driver.framebuffer_desc
  self.tracked_keys = &self.mmio_driver.tracked_keys
  self.palette = &self.mmio_driver.palette
  -- track all keys by default
  memory.spanset((@span(boolean))(self.mmio_driver.tracked_keys), true)
  -- init palette
  self:_init_default_palette()
  -- retrieve input card from host
  self:_ctl(RIV_CONTROL_OPEN)
  self.incard_len = self.mmio_device.incard_len & (RIV_MEMSIZE_INOUTBUFFER-1)
  self.incard_format = self.mmio_device.incard_format
  -- initialize prng
  self:_init_prng(argc, argv)
end

function riv_context:shutdown(): void <cexport'riv_shutdown'>
  -- ignore when not initialized
  if not self.mmio_driver then return end
  -- tell the host we finished, the host may use inoutbuffer
  self:_ctl(RIV_CONTROL_CLOSE)
  -- unmap memory
  local mmio: pointer = (@pointer)(RIV_VADDR_BASE)
  memory.zero(mmio, RIV_MEMSIZE_HUGEPAGE)
  assert(munmap(mmio, RIV_MEMSIZE_HUGEPAGE) == 0, 'munmap failed')
  assert(get_free_hugepages() == 1, 'no freed hugepage')
  -- close yield device
  if self.yield_fd > 0 then
    assert(close(self.yield_fd) >= 0, 'close yield fd failed')
  end
  memory.zero(self, #@riv_context)
end

function riv_context:_append_keystroke_entropy(key_code: uint8, down: boolean, frame: uint64): void
  local h: uint64 = 0
  h = h | key_code
  h = h | (down and (1_u64 << 8) or 0_u64)
  h = h | (frame << 9)
  self.entropy[self.entropy_index] = h
  self.entropy_index = (self.entropy_index + 1) & (#self.entropy - 1)
  if self.entropy_size < #self.entropy then
    self.entropy_size = self.entropy_size + 1
  end
end

function riv_context:_poll_inputs(): void
  for i: uint32=0,<#self.keys do
    self.keys[i].down = false
    self.keys[i].up = false
  end
  if self.mmio_device.key_toggle_count > 0 then
    for i: uint32=0,<self.mmio_device.key_toggle_count do
      local key_code: uint8 = self.mmio_device.key_toggles[i]
      local press: boolean = not self.keys[key_code].press
      local frame: uint64 = self.frame
      self.keys[key_code].press = press
      if press then
        self.keys[key_code].down = true
        self.keys[key_code].down_frame = frame
      else
        self.keys[key_code].up = true
        self.keys[key_code].up_frame = frame
      end
      self:_append_keystroke_entropy(key_code, press, frame)
    end
    local entropy: span(byte) = {data=(@*[0]uint8)(&self.entropy),size=self.entropy_size * #@uint64}
    self.prng:srand_entropy(entropy)
  end
end

function riv_context:present(): void <cexport'riv_present'>
  -- copy outcard description to driver
  self.mmio_driver.outcard_format = self.outcard_format
  self.mmio_driver.outcard_len = self.outcard_len
  -- present
  self:_ctl(RIV_CONTROL_PRESENT)
  -- advance frame
  self.frame = self.frame + 1
  self.mmio_driver.frame = self.frame
  -- audio commands was flushed
  self.mmio_driver.audio_command_len = 0
  -- poll keyboard inputs
  self:_poll_inputs()
end

function riv_context:loop(frame_cb: function(riv: *riv_context)): void <cexport'riv_loop'>
  assert(self.mmio_driver, 'riv not initialized')
  while not self.quit do
    frame_cb(self)
    self:present()
  end
end

function riv_context:_queue_audio_command(command: riv_audio_command): void
  local command_idx: uint32 = self.mmio_driver.audio_command_len
  self.mmio_driver.audio_commands[command_idx] = command
  self.mmio_driver.audio_command_len = command_idx + 1
  if command_idx >= #self.mmio_driver.audio_commands then
    self:_ctl(RIV_CONTROL_FLUSH_AUDIO)
    self.mmio_driver.audio_command_len = 0
  end
end

function riv_context:sound_play_from_memory(data: span(byte), amplitude: uint32): uint64 <cexport'riv_sound_play_from_memory'>
  local handle_id: uint64 = self.sound_handle_gen + 1
  self.sound_handle_gen = handle_id
  memory.spancopy(span_uint8(self.audiobuffer), data)
  local command: riv_audio_command = {
    type = RIV_AUDIOCOMMAND_SOUND_PLAY,
    desc = {
      sound_play = {
        handle_id = handle_id,
        buf_off = 0,
        buf_len = #data,
        amplitude = amplitude,
      }
    }
  }
  self:_queue_audio_command(command)
  return handle_id
end

function riv_context:sound_stop(handle_id: uint64): void <cexport'riv_sound_stop'>
  local command: riv_audio_command = {
    type = RIV_AUDIOCOMMAND_SOUND_STOP,
    desc = {
      sound_play = {
        handle_id = handle_id,
      }
    }
  }
  self:_queue_audio_command(command)
end

function riv_context:waveform(waveform: riv_waveform_desc): void <cexport'riv_waveform'>
    local command: riv_audio_command = {
    type = RIV_AUDIOCOMMAND_WAVEFORM,
    desc = {waveform = waveform}
  }
  self:_queue_audio_command(command)
end

global function riv_run(run_desc: *riv_run_desc): void <cexport'riv_run'>
  local self: riv_context
  if run_desc.framebuffer_desc.width == 0 then run_desc.framebuffer_desc.width = RIV_DEFAULT_WIDTH end
  if run_desc.framebuffer_desc.height == 0 then run_desc.framebuffer_desc.height = RIV_DEFAULT_HEIGHT end
  if run_desc.framebuffer_desc.fps == 0 then run_desc.framebuffer_desc.fps = RIV_DEFAULT_FPS end
  if run_desc.framebuffer_desc.pixel_format == 0 then run_desc.framebuffer_desc.pixel_format = RIV_DEFAULT_PIXELFORMAT end
  if not self.mmio_driver then
    self:setup(run_desc.argc, run_desc.argv)
  end
  if run_desc.init_cb then
    run_desc.init_cb(self)
  end
  self.mmio_driver.framebuffer_desc = run_desc.framebuffer_desc
  if run_desc.frame_cb then
    self:loop(run_desc.frame_cb)
  end
  if run_desc.cleanup_cb then
    run_desc.cleanup_cb(self)
  end
  self:shutdown()
  exit(0)
end
