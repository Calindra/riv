## linklib 'riv'

require 'span'

require 'riv_types'

global argc: cint <cimport'argc'>
global argv: *[0]cstring <cimport'argv'>

-- util
global function riv_version(): uint64 <cimport'riv_version'> end
global function riv_rdcycle(): uint64 <cimport'riv_rdcycle'> end
global function riv_printf(format: cstring, ...: cvarargs): usize <cimport'riv_printf'> end
global function riv_snprintf(s: cstring, maxlen: usize, format: cstring <const>, ...: cvarargs): usize <cimport'riv_snprintf'> end

-- context
function riv_context:setup(argc: int32, argv: *[0]cstring): void <cimport'riv_setup'> end
function riv_context:shutdown(): void <cimport'riv_shutdown'> end
function riv_context:present(): void <cimport'riv_present'> end
function riv_context:loop(frame_cb: function(riv: *riv_context)): void <cimport'riv_loop'> end
function riv_context:sound_play_from_memory(data: span(byte), vol: uint32): uint64 <cimport'riv_sound_play_from_memory'> end
function riv_context:sound_stop(source: uint64): void <cimport'riv_sound_stop'> end
global function riv_run(run_desc: *riv_run_desc): void <cimport'riv_run'> end

-- prng
function riv_prng:srand(a: uint64, b: uint64): void <cimport'riv_srand'> end
function riv_prng:rand(): uint64 <cimport'riv_rand'> end
function riv_prng:rand_uint(high: uint64): uint64 <cimport'riv_rand_uint'> end
function riv_prng:rand_int(low: int64, high: int64): int64 <cimport'riv_rand_int'> end
function riv_prng:rand_float(): float64 <cimport'riv_rand_float'> end

-- Macro for generating tiny binaries.
## function nostartfiles(libc) cflags '-nostartfiles'
  local function _start() <entrypoint,noreturn,cattribute'externally_visible,naked'>
    ##[=[ cemit[[
  asm volatile(
    ".weak __global_pointer$;\n"
    ".hidden __global_pointer$;\n" // don't export symbol
    ".option push;\n"
    ".option norelax;\n"
    "la gp, __global_pointer$;\n"
    "mv a0, sp;\n" // stack pointer
    "lw a1, 0(sp);\n" // argc
    "addi a2, sp, 8;\n" // argv
    "andi sp, sp, -16;\n" // make stack 16-byte aligned
    ".option pop;\n"
  );
]] ]=]
    local sp: pointer <register'a0',nodce,noinit>
    local argc: cint <register'a1',nodce,noinit>
    local argv: *[0]cstring <register'a2',nodce,noinit>
    local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl,noinline> end
    ## if libc then
      local function __libc_start_main(main: function(cint, *cstring): cint, argc: cint, argv: pointer, init: function(), fini: function(), rtld_fini: function(), stack_end: pointer) <cimport,noreturn> end
      __libc_start_main(nelua_main, (@cint)(argc), argv, nilptr, nilptr, nilptr, sp)
    ## else
      local res: cint = nelua_main(argc, argv)
      local function exit_syscall(status: isize): void <inline,noreturn>
        local a0: isize <register'a0',nodce> = status
        ## cemit[[  asm volatile("li a7, 93; scall; ebreak;" : : "r"(a0));]]
        ## cemit[[__builtin_unreachable();]]
      end
      exit_syscall(res)
    ## end
  end
## end
