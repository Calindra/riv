## pragmas.unitname = ''
## linklib 'riv'

require 'riv_types'

global argc: cint <cimport'argc',nodecl>
global argv: *[0]cstring <cimport'argv',nodecl>

global riv: riv_context <cimport,nodecl>

-- util
global function riv_version(): uint64 <cimport,nodecl> end
global function riv_rdcycle(): uint64 <cimport,nodecl> end
global function riv_printf(format: cstring <const>, ...: cvarargs): usize <cimport,nodecl> end
global function riv_snprintf(s: cstring, maxlen: usize, format: cstring <const>, ...: cvarargs): usize <cimport,nodecl> end

-- basic
global function riv_setup(argc: int32, argv: *[0]cstring): void <cimport,nodecl> end
global function riv_shutdown(): void <cimport,nodecl> end
global function riv_present(): boolean <cimport,nodecl> end

-- images
global function riv_make_image(filename: cstring <const>, color_key: int64): uint64 <cimport,nodecl> end
global function riv_destroy_image(img_id: uint64): void <cimport,nodecl> end

-- sprites
global function riv_make_sprite(img_id: uint64, w: uint32, h: uint32): uint64 <cimport,nodecl> end
global function riv_destroy_sprite(spr_id: uint64): void <cimport,nodecl> end

-- drawing
global function riv_clear_screen(col: uint32): void <cimport,nodecl> end
global function riv_draw_point(x: int64, y: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_line(x0: int64, y0: int64, x1: int64, y1: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_rect_fill(x0: int64, y0: int64, w: int64, h: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_rect_line(x0: int64, y0: int64, w: int64, h: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_quad_fill(x0: int64, y0: int64, x1: int64, y1: int64, x2: int64, y2: int64, x3: int64, y3: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_quad_line(x0: int64, y0: int64, x1: int64, y1: int64, x2: int64, y2: int64, x3: int64, y3: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_box_fill(ox: int64, oy: int64, w: int64, h: int64, rot: float32, col: uint32): void <cimport,nodecl> end
global function riv_draw_box_line(ox: int64, oy: int64, w: int64, h: int64, rot: float32, col: uint32): void <cimport,nodecl> end
global function riv_draw_circle_fill(ox: int64, oy: int64, d: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_circle_line(ox: int64, oy: int64, d: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_ellipse_fill(ox: int64, oy: int64, w: int64, h: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_ellipse_line(ox: int64, oy: int64, w: int64, h: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_triangle_fill(x0: int64, y0: int64, x1: int64, y1: int64, x2: int64, y2: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_triangle_line(x0: int64, y0: int64, x1: int64, y1: int64, x2: int64, y2: int64, col: uint32): void <cimport,nodecl> end
global function riv_draw_image_rect(img_id: uint64, x0: int64, y0: int64, w: int64, h: int64, sx0: int64, sy0: int64, mw: int64, mh: int64): void <cimport,nodecl> end
global function riv_draw_sprite(n: uint32, spr_id: uint64, x0: int64, y0: int64, nw: int64, nh: int64, mw: int64, mh: int64): void <cimport,nodecl> end
global function riv_draw_text(text: cstring <const>, spr_id: uint64, x0: int64, y0: int64, col: int64, mw: int64, mh: int64, sx: int64, sy: int64): riv_vec2i <cimport,nodecl> end

-- sound system
global function riv_make_sound_buffer(desc: *riv_sound_buffer_desc): uint64 <cimport,nodecl> end
global function riv_destroy_sound_buffer(sndbuf_id: uint64): void <cimport,nodecl> end
global function riv_sound(desc: *riv_sound_desc): uint64 <cimport,nodecl> end
global function riv_waveform(desc: *riv_waveform_desc): uint64 <cimport,nodecl> end

-- prng
global function riv_srand(a: uint64, b: uint64): void <cimport,nodecl> end
global function riv_rand(): uint64 <cimport,nodecl> end
global function riv_rand_uint(high: uint64): uint64 <cimport,nodecl> end
global function riv_rand_int(low: int64, high: int64): int64 <cimport,nodecl> end
global function riv_rand_float(): float64 <cimport,nodecl> end

-- Macro for generating tiny binaries.
## function nostartfiles(libc) cflags '-nostartfiles'
  local function _start() <entrypoint,noreturn,cattribute'externally_visible,naked'>
    ##[=[ cemit[[
  asm volatile(
    ".weak __global_pointer$;\n"
    ".hidden __global_pointer$;\n" // don't export symbol
    ".option push;\n"
    ".option norelax;\n"
    "la gp, __global_pointer$;\n"
    "mv a0, sp;\n" // stack pointer
    "lw a1, 0(sp);\n" // argc
    "addi a2, sp, 8;\n" // argv
    "andi sp, sp, -16;\n" // make stack 16-byte aligned
    ".option pop;\n"
  );
]] ]=]
    local argc: cint <register'a1',nodce,noinit>
    local argv: *[0]cstring <register'a2',nodce,noinit>
    local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl,noinline> end
    ## if libc then
      local main_callback: type = @function(cint, *cstring): cint
      local function __libc_start_main(main: main_callback, argc: cint, argv: pointer, init: pointer, fini: pointer, rtld_fini: pointer, stack_end: pointer) <cimport,noreturn> end
      local sp: pointer <register'a0',nodce,noinit>
      __libc_start_main(nelua_main, (@cint)(argc), argv, nilptr, nilptr, nilptr, sp)
    ## else
      local res: cint = nelua_main(argc, argv)
      local function exit_syscall(status: isize): void <inline,noreturn>
        local a0: isize <register'a0',nodce> = status
        ## cemit[[  asm volatile("li a7, 93; scall; ebreak;" : : "r"(a0));]]
        ## cemit[[__builtin_unreachable();]]
      end
      exit_syscall(res)
    ## end
  end
## end
