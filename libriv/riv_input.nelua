## pragmas.unitname = ''

require 'memory'
require 'math'
require '.riv_types'
require '.riv_xoshiro256'

global function riv_init_input(): void
  -- track only gamepad keys by default
  for i: uint32=RIV_GAMEPAD1_UP,RIV_GAMEPAD4_R3 do
    riv.mmio_driver.tracked_keys[i] = true
  end
end

local function riv_append_keystroke_entropy(key_code: uint8, down: boolean, frame: uint64): void
  local h: uint64 = 0
  h = h | key_code
  h = h | (down and (1_u64 << 8) or 0_u64)
  h = h | (frame << 9)
  riv.entropy[riv.entropy_index] = h
  riv.entropy_index = (riv.entropy_index + 1) & (#riv.entropy - 1)
  if riv.entropy_size < #riv.entropy then
    riv.entropy_size = riv.entropy_size + 1
  end
end

global function riv_poll_inputs(): void
  for i: uint32=0,<#riv.keys do
    riv.keys[i].press = false
    riv.keys[i].release = false
  end
  local key_toggle_count: uint32 = riv.mmio_device.key_toggle_count
  if key_toggle_count > 0 then
    for i: uint32=0,<math.min(key_toggle_count,(@uint32)(#riv.mmio_device.key_toggles)) do
      local key_code: uint8 = riv.mmio_device.key_toggles[i]
      local down: boolean = not riv.keys[key_code].down
      local frame: uint64 = riv.frame
      riv.key_toggles[i] = key_code
      riv.keys[key_code].down = down
      riv.keys[key_code].up = not down
      if down then
        riv.keys[key_code].press = true
        riv.keys[key_code].down_frame = frame
      else -- up
        riv.keys[key_code].release = true
        riv.keys[key_code].up_frame = frame
      end
      riv_append_keystroke_entropy(key_code, down, frame)
    end
    local entropy: span(uint8) = {data=(@*[0]uint8)(&riv.entropy),size=riv.entropy_size * #@uint64}
    riv.prng:srand_entropy(entropy)
  end
  for i: uint32=key_toggle_count,<math.min(riv.key_toggle_count,(@uint32)(#riv.mmio_device.key_toggles)) do
    riv.key_toggles[i] = 0
  end
  riv.key_toggle_count = key_toggle_count
end
