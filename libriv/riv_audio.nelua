## pragmas.unitname = ''

require 'memory'
require '.riv_types'
require '.riv_yield'

local function riv_flush_audio_commands(): void
  riv_yield(RIV_CONTROL_FLUSH_AUDIO)
  riv.audio_command_len = 0
  riv.txbuffer_off = 0
end

local function riv_queue_audio_command(command: riv_audio_command): void
  local command_idx: uint32 = riv.audio_command_len
  riv.audio_commands[command_idx] = command
  riv.audio_command_len = command_idx + 1
  if riv.audio_command_len >= #riv.audio_commands then
    riv_flush_audio_commands()
  end
end

global function riv_make_soundbuffer(desc: *riv_soundbuffer_desc): uint64 <cexport>
  -- silently ignore invalid id field
  if desc.id ~= 0 then return 0 end
  -- TODO: we could send in multiple chunks
  assert(desc.data.size <= RIV_SIZE_TXBUFFER, 'sound buffer is too large')
  -- flush previous audio buffer if there is not enough space
  if riv.txbuffer_off + desc.data.size > RIV_SIZE_TXBUFFER then
    riv_flush_audio_commands()
  end
  -- copy buffer
  memory.copy(&riv.txbuffer[riv.txbuffer_off], desc.data.data, desc.data.size)
  desc.data.data = (@*uint8)((@usize)(riv.txbuffer_off))
  riv.txbuffer_off = riv.txbuffer_off + (@uint32)(desc.data.size)
  -- choose sound buffer id
  desc.id = riv.soundbuffer_gen + 1
  riv.soundbuffer_gen = desc.id
  -- queue command
  riv_queue_audio_command{
    type = RIV_AUDIOCOMMAND_MAKE_SOUNDBUFFER,
    desc = {soundbuffer = $desc},
  }
  return desc.id
end

global function riv_destroy_soundbuffer(id: uint64): void <cexport>
  -- queue command
  riv_queue_audio_command{
    type = RIV_AUDIOCOMMAND_DESTROY_SOUNDBUFFER,
    desc = {soundbuffer = {id = id}},
  }
end

global function riv_sound(desc: *riv_sound_desc): uint64 <cexport>
  -- choose sound id
  if desc.id == 0 then
    if desc.buffer_id == 0 then return 0 end -- nothing to play
    desc.id = riv.sound_gen + 1
    riv.sound_gen = desc.id
  end
  -- queue command
  riv_queue_audio_command{
    type = RIV_AUDIOCOMMAND_SOUND,
    desc = {sound = $desc}
  }
  return desc.id
end

global function riv_waveform(desc: *riv_waveform_desc): uint64 <cexport>
  -- choose sound id
  desc.id = riv.sound_gen + 1
  riv.sound_gen = desc.id
  -- queue command
  riv_queue_audio_command{
    type = RIV_AUDIOCOMMAND_WAVEFORM,
    desc = {waveform = $desc}
  }
  return desc.id
end