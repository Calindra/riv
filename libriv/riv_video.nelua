## pragmas.unitname = ''

require 'miniz'
require 'spng'
require '.riv_types'

local function riv_init_default_palette(): void
  riv.palette[RIV_COLOR_BLACK] = RIV_RGB_BLACK
  riv.palette[RIV_COLOR_WHITE] = RIV_RGB_WHITE
  riv.palette[RIV_COLOR_LIGHTGREY] = RIV_RGB_LIGHTGREY
  riv.palette[RIV_COLOR_GREY] = RIV_RGB_GREY
  riv.palette[RIV_COLOR_DARKSLATE] = RIV_RGB_DARKSLATE
  riv.palette[RIV_COLOR_SLATE] = RIV_RGB_SLATE
  riv.palette[RIV_COLOR_LIGHTSLATE] = RIV_RGB_LIGHTSLATE
  riv.palette[RIV_COLOR_LIGHTTEAL] = RIV_RGB_LIGHTTEAL
  riv.palette[RIV_COLOR_LIGHTBLUE] = RIV_RGB_LIGHTBLUE
  riv.palette[RIV_COLOR_BLUE] = RIV_RGB_BLUE
  riv.palette[RIV_COLOR_DARKERGREEN] = RIV_RGB_DARKERGREEN
  riv.palette[RIV_COLOR_DARKGREEN] = RIV_RGB_DARKGREEN
  riv.palette[RIV_COLOR_GREEN] = RIV_RGB_GREEN
  riv.palette[RIV_COLOR_LIGHTGREEN] = RIV_RGB_LIGHTGREEN
  riv.palette[RIV_COLOR_LIGHTYELLOW] = RIV_RGB_LIGHTYELLOW
  riv.palette[RIV_COLOR_LIGHTPEACH] = RIV_RGB_LIGHTPEACH
  riv.palette[RIV_COLOR_PEACH] = RIV_RGB_PEACH
  riv.palette[RIV_COLOR_LIGHTBROWN] = RIV_RGB_LIGHTBROWN
  riv.palette[RIV_COLOR_BROWN] = RIV_RGB_BROWN
  riv.palette[RIV_COLOR_DARKBROWN] = RIV_RGB_DARKBROWN
  riv.palette[RIV_COLOR_DARKERBROWN] = RIV_RGB_DARKERBROWN
  riv.palette[RIV_COLOR_DARKRED] = RIV_RGB_DARKRED
  riv.palette[RIV_COLOR_RED] = RIV_RGB_RED
  riv.palette[RIV_COLOR_LIGHTRED] = RIV_RGB_LIGHTRED
  riv.palette[RIV_COLOR_ORANGE] = RIV_RGB_ORANGE
  riv.palette[RIV_COLOR_GOLD] = RIV_RGB_GOLD
  riv.palette[RIV_COLOR_YELLOW] = RIV_RGB_YELLOW
  riv.palette[RIV_COLOR_LIGHTPINK] = RIV_RGB_LIGHTPINK
  riv.palette[RIV_COLOR_PINK] = RIV_RGB_PINK
  riv.palette[RIV_COLOR_DARKPINK] = RIV_RGB_DARKPINK
  riv.palette[RIV_COLOR_PURPLE] = RIV_RGB_PURPLE
  riv.palette[RIV_COLOR_DARKPURPLE] = RIV_RGB_DARKPURPLE
end

global function riv_init_video(): void
  riv_init_default_palette()
end

-- Encodes a screenshot from the current framebuffer to a PNG binary string.
local function riv_encode_png_screenshot(): string
  local ret: cint
  -- Creating an encoder context requires a flag
  local enc: *spng_ctx = spng_ctx_new(SPNG_CTX_ENCODER)
  assert(enc ~= nilptr, 'spng_ctx_new failed')
  defer spng_ctx_free(enc) end

  -- Encode to internal buffer managed by the library
  ret = spng_set_option(enc, SPNG_ENCODE_TO_BUFFER, 1)
  if ret ~= 0 then error('spng_set_option failed: '..spng_strerror(ret)) end

  -- Specify image dimensions, PNG format
  local ihdr: spng_ihdr = {
    width = riv.width,
    height = riv.height,
    bit_depth = 8,
    color_type = SPNG_COLOR_TYPE_INDEXED
  }

  -- Image will be encoded according to ihdr.color_type, .bit_depth
  ret = spng_set_ihdr(enc, &ihdr)
  if ret ~= 0 then error('spng_set_ihdr failed: '..spng_strerror(ret)) end

  -- Detect palette size
  local num_pixels: usize = riv.width * riv.height
  local num_colors: usize = 0
  for i: usize=0,<num_pixels do
    if riv.framebuffer[i] > num_colors then num_colors = riv.framebuffer[i] end
  end
  num_colors = num_colors + 1

  -- Set palette colors
  local plte: spng_plte = {n_entries = num_colors}
  for i: usize=0,<256 do
    plte.entries[i].red = (@uint8)((riv.palette[i] >> 0) & 0xff)
    plte.entries[i].green = (@uint8)((riv.palette[i] >> 8) & 0xff)
    plte.entries[i].blue = (@uint8)((riv.palette[i] >> 16) & 0xff)
  end
  ret = spng_set_plte(enc, &plte)
  if ret ~= 0 then error('spng_set_plte failed: '..spng_strerror(ret)) end

  -- SPNG_FMT_PNG is a special value that matches the format in ihdr,
  -- SPNG_ENCODE_FINALIZE will finalize the PNG with the end-of-file marker
  ret = spng_encode_image(enc, &riv.framebuffer[0], num_pixels, SPNG_FMT_PNG, SPNG_ENCODE_FINALIZE)
  if ret ~= 0 then error('spng_encode_image failed: '..spng_strerror(ret)) end

  -- PNG is written to an internal buffer by default
  ret = 0
  local png_size: usize
  local png: pointer = spng_get_png_buffer(enc, &png_size, &ret)
  if ret ~= 0 or png == nilptr then error('spng_get_png_buffer failed: '..spng_strerror(ret)) end

  return string{data=(@*[0]uint8)(png), size=png_size}
end

-- Save screenshot
global function riv_save_screenshot_fd(): void
  local screenshot_fd_str: string = getenv('RIV_SCREENSHOT_FD')
  if #screenshot_fd_str > 0 then
    local screenshot_fd: int32 = screenshot_fd_str.data[0] - '0'_b
    local screenshot_png: string <close> = riv_encode_png_screenshot()
    assert(write(screenshot_fd, screenshot_png.data, screenshot_png.size) == screenshot_png.size, 'screenshot fd write failed')
  end
end
