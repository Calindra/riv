## linklib 'riv' RIV_BINDINGS=true

require '.riv'
require '.riv_prng'

## function nostartfiles(libc) cflags '-nostartfiles'
  local function _start(sp: pointer, argc: uint32, argv: *[0]cstring) <entrypoint,noreturn,cattribute'externally_visible,naked'>
    ##[=[ cemit[[
  asm volatile(
    ".weak __global_pointer$;\n"
    ".hidden __global_pointer$;\n" // don't export symbol
    ".option push;\n"
    ".option norelax;\n"
    "la gp, __global_pointer$;\n"
    "mv a0, sp;\n" // stack pointer
    "lw a1, 0(sp);\n" // argc
    "addi a2, sp, 8;\n" // argv
    "andi sp, sp, -16;\n" // make stack 16-byte aligned
    ".option pop;\n"
  : : : "a6");
]] ]=]
    local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl,noinline> end
    ## if libc then
      local function __libc_start_main(main: function(cint, *cstring): cint, argc: cint, argv: pointer, init: function(), fini: function(), rtld_fini: function(), stack_end: pointer) <cimport,noreturn> end
      __libc_start_main(nelua_main, (@cint)(argc), argv, nilptr, nilptr, nilptr, sp)
    ## else
      local res: isize = (@isize)(nelua_main(argc, argv))
      local function exit_syscall(status: int64): void <inline,noreturn>
        local a0: int64 <register'a0',nodce> = status
        ## cemit[[  asm volatile("li a7, 93; scall; ebreak;" : : "r"(a0));]]
        ## cemit[[__builtin_unreachable();]]
      end
      exit_syscall(res)
    ## end
  end
## end
