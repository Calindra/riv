##[[
-- sokol backend
if ccinfo.is_emscripten then
  cdefine 'SOKOL_GLES3'
elseif ccinfo.is_windows then
  cdefine 'SOKOL_D3D11'
else
  cdefine 'SOKOL_GLCORE33'
end
-- sokol_gfx
cdefine 'SOKOL_GFX_API_DECL static'
cdefine 'SOKOL_GFX_IMPL'
cinclude 'sokol_gfx.h'
if ccinfo.is_windows then
  linklib 'gdi32'
  linklib 'opengl32'
elseif not ccinfo.is_emscripten then
  linklib 'GL'
end
-- sokol_gp
cdefine 'SOKOL_GP_API_DECL static'
cdefine 'SOKOL_GP_IMPL'
cinclude 'sokol_gp.h'
-- sokol_app
cdefine 'SOKOL_APP_API_DECL static'
cdefine 'SOKOL_APP_IMPL'
cdefine 'SOKOL_NO_ENTRY'
cinclude 'sokol_app.h'
if ccinfo.is_linux then
  linklib 'X11'
  linklib 'Xi'
  linklib 'Xcursor'
  linklib 'dl'
  cflags '-pthread'
elseif ccinfo.is_windows then
  linklib 'kernel32'
  linklib 'user32'
  linklib 'shell32'
end
-- sokol_args
cdefine 'SOKOL_ARGS_API_DECL static'
cdefine 'SOKOL_ARGS_IMPL'
cinclude 'sokol_args.h'
]]
global sg_buffer: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_image: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_shader: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_pipeline: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_pass: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_context: type <cimport,nodecl> = @record{
  id: uint32
}
global sg_range: type <cimport,nodecl> = @record{
  ptr: pointer,
  size: csize
}
global SG_INVALID_ID: cint <comptime> = 0
global SG_NUM_SHADER_STAGES: cint <comptime> = 2
global SG_NUM_INFLIGHT_FRAMES: cint <comptime> = 2
global SG_MAX_COLOR_ATTACHMENTS: cint <comptime> = 4
global SG_MAX_SHADERSTAGE_BUFFERS: cint <comptime> = 8
global SG_MAX_SHADERSTAGE_IMAGES: cint <comptime> = 12
global SG_MAX_SHADERSTAGE_UBS: cint <comptime> = 4
global SG_MAX_UB_MEMBERS: cint <comptime> = 16
global SG_MAX_VERTEX_ATTRIBUTES: cint <comptime> = 16
global SG_MAX_MIPMAPS: cint <comptime> = 16
global SG_MAX_TEXTUREARRAY_LAYERS: cint <comptime> = 128
global sg_color: type <cimport,nodecl> = @record{
  r: float32,
  g: float32,
  b: float32,
  a: float32
}
global sg_backend: type <cimport,nodecl,using> = @enum(cint){
  SG_BACKEND_GLCORE33 = 0,
  SG_BACKEND_GLES3 = 1,
  SG_BACKEND_D3D11 = 2,
  SG_BACKEND_METAL_IOS = 3,
  SG_BACKEND_METAL_MACOS = 4,
  SG_BACKEND_METAL_SIMULATOR = 5,
  SG_BACKEND_WGPU = 6,
  SG_BACKEND_DUMMY = 7
}
global sg_pixel_format: type <cimport,nodecl,using> = @enum(cint){
  _SG_PIXELFORMAT_DEFAULT = 0,
  SG_PIXELFORMAT_NONE = 1,
  SG_PIXELFORMAT_R8 = 2,
  SG_PIXELFORMAT_R8SN = 3,
  SG_PIXELFORMAT_R8UI = 4,
  SG_PIXELFORMAT_R8SI = 5,
  SG_PIXELFORMAT_R16 = 6,
  SG_PIXELFORMAT_R16SN = 7,
  SG_PIXELFORMAT_R16UI = 8,
  SG_PIXELFORMAT_R16SI = 9,
  SG_PIXELFORMAT_R16F = 10,
  SG_PIXELFORMAT_RG8 = 11,
  SG_PIXELFORMAT_RG8SN = 12,
  SG_PIXELFORMAT_RG8UI = 13,
  SG_PIXELFORMAT_RG8SI = 14,
  SG_PIXELFORMAT_R32UI = 15,
  SG_PIXELFORMAT_R32SI = 16,
  SG_PIXELFORMAT_R32F = 17,
  SG_PIXELFORMAT_RG16 = 18,
  SG_PIXELFORMAT_RG16SN = 19,
  SG_PIXELFORMAT_RG16UI = 20,
  SG_PIXELFORMAT_RG16SI = 21,
  SG_PIXELFORMAT_RG16F = 22,
  SG_PIXELFORMAT_RGBA8 = 23,
  SG_PIXELFORMAT_SRGB8A8 = 24,
  SG_PIXELFORMAT_RGBA8SN = 25,
  SG_PIXELFORMAT_RGBA8UI = 26,
  SG_PIXELFORMAT_RGBA8SI = 27,
  SG_PIXELFORMAT_BGRA8 = 28,
  SG_PIXELFORMAT_RGB10A2 = 29,
  SG_PIXELFORMAT_RG11B10F = 30,
  SG_PIXELFORMAT_RG32UI = 31,
  SG_PIXELFORMAT_RG32SI = 32,
  SG_PIXELFORMAT_RG32F = 33,
  SG_PIXELFORMAT_RGBA16 = 34,
  SG_PIXELFORMAT_RGBA16SN = 35,
  SG_PIXELFORMAT_RGBA16UI = 36,
  SG_PIXELFORMAT_RGBA16SI = 37,
  SG_PIXELFORMAT_RGBA16F = 38,
  SG_PIXELFORMAT_RGBA32UI = 39,
  SG_PIXELFORMAT_RGBA32SI = 40,
  SG_PIXELFORMAT_RGBA32F = 41,
  SG_PIXELFORMAT_DEPTH = 42,
  SG_PIXELFORMAT_DEPTH_STENCIL = 43,
  SG_PIXELFORMAT_BC1_RGBA = 44,
  SG_PIXELFORMAT_BC2_RGBA = 45,
  SG_PIXELFORMAT_BC3_RGBA = 46,
  SG_PIXELFORMAT_BC4_R = 47,
  SG_PIXELFORMAT_BC4_RSN = 48,
  SG_PIXELFORMAT_BC5_RG = 49,
  SG_PIXELFORMAT_BC5_RGSN = 50,
  SG_PIXELFORMAT_BC6H_RGBF = 51,
  SG_PIXELFORMAT_BC6H_RGBUF = 52,
  SG_PIXELFORMAT_BC7_RGBA = 53,
  SG_PIXELFORMAT_PVRTC_RGB_2BPP = 54,
  SG_PIXELFORMAT_PVRTC_RGB_4BPP = 55,
  SG_PIXELFORMAT_PVRTC_RGBA_2BPP = 56,
  SG_PIXELFORMAT_PVRTC_RGBA_4BPP = 57,
  SG_PIXELFORMAT_ETC2_RGB8 = 58,
  SG_PIXELFORMAT_ETC2_RGB8A1 = 59,
  SG_PIXELFORMAT_ETC2_RGBA8 = 60,
  SG_PIXELFORMAT_ETC2_RG11 = 61,
  SG_PIXELFORMAT_ETC2_RG11SN = 62,
  SG_PIXELFORMAT_RGB9E5 = 63,
  _SG_PIXELFORMAT_NUM = 64,
  _SG_PIXELFORMAT_FORCE_U32 = 2147483647
}
global sg_pixelformat_info: type <cimport,nodecl> = @record{
  sample: boolean,
  filter: boolean,
  render: boolean,
  blend: boolean,
  msaa: boolean,
  depth: boolean
}
global sg_features: type <cimport,nodecl> = @record{
  origin_top_left: boolean,
  image_clamp_to_border: boolean,
  mrt_independent_blend_state: boolean,
  mrt_independent_write_mask: boolean
}
global sg_limits: type <cimport,nodecl> = @record{
  max_image_size_2d: cint,
  max_image_size_cube: cint,
  max_image_size_3d: cint,
  max_image_size_array: cint,
  max_image_array_layers: cint,
  max_vertex_attrs: cint,
  gl_max_vertex_uniform_vectors: cint,
  gl_max_combined_texture_image_units: cint
}
global sg_resource_state: type <cimport,nodecl,using> = @enum(cint){
  SG_RESOURCESTATE_INITIAL = 0,
  SG_RESOURCESTATE_ALLOC = 1,
  SG_RESOURCESTATE_VALID = 2,
  SG_RESOURCESTATE_FAILED = 3,
  SG_RESOURCESTATE_INVALID = 4,
  _SG_RESOURCESTATE_FORCE_U32 = 2147483647
}
global sg_usage: type <cimport,nodecl,using> = @enum(cint){
  _SG_USAGE_DEFAULT = 0,
  SG_USAGE_IMMUTABLE = 1,
  SG_USAGE_DYNAMIC = 2,
  SG_USAGE_STREAM = 3,
  _SG_USAGE_NUM = 4,
  _SG_USAGE_FORCE_U32 = 2147483647
}
global sg_buffer_type: type <cimport,nodecl,using> = @enum(cint){
  _SG_BUFFERTYPE_DEFAULT = 0,
  SG_BUFFERTYPE_VERTEXBUFFER = 1,
  SG_BUFFERTYPE_INDEXBUFFER = 2,
  _SG_BUFFERTYPE_NUM = 3,
  _SG_BUFFERTYPE_FORCE_U32 = 2147483647
}
global sg_index_type: type <cimport,nodecl,using> = @enum(cint){
  _SG_INDEXTYPE_DEFAULT = 0,
  SG_INDEXTYPE_NONE = 1,
  SG_INDEXTYPE_UINT16 = 2,
  SG_INDEXTYPE_UINT32 = 3,
  _SG_INDEXTYPE_NUM = 4,
  _SG_INDEXTYPE_FORCE_U32 = 2147483647
}
global sg_image_type: type <cimport,nodecl,using> = @enum(cint){
  _SG_IMAGETYPE_DEFAULT = 0,
  SG_IMAGETYPE_2D = 1,
  SG_IMAGETYPE_CUBE = 2,
  SG_IMAGETYPE_3D = 3,
  SG_IMAGETYPE_ARRAY = 4,
  _SG_IMAGETYPE_NUM = 5,
  _SG_IMAGETYPE_FORCE_U32 = 2147483647
}
global sg_sampler_type: type <cimport,nodecl,using> = @enum(cint){
  _SG_SAMPLERTYPE_DEFAULT = 0,
  SG_SAMPLERTYPE_FLOAT = 1,
  SG_SAMPLERTYPE_SINT = 2,
  SG_SAMPLERTYPE_UINT = 3
}
global sg_cube_face: type <cimport,nodecl,using> = @enum(cint){
  SG_CUBEFACE_POS_X = 0,
  SG_CUBEFACE_NEG_X = 1,
  SG_CUBEFACE_POS_Y = 2,
  SG_CUBEFACE_NEG_Y = 3,
  SG_CUBEFACE_POS_Z = 4,
  SG_CUBEFACE_NEG_Z = 5,
  SG_CUBEFACE_NUM = 6,
  _SG_CUBEFACE_FORCE_U32 = 2147483647
}
global sg_shader_stage: type <cimport,nodecl,using> = @enum(cint){
  SG_SHADERSTAGE_VS = 0,
  SG_SHADERSTAGE_FS = 1,
  _SG_SHADERSTAGE_FORCE_U32 = 2147483647
}
global sg_primitive_type: type <cimport,nodecl,using> = @enum(cint){
  _SG_PRIMITIVETYPE_DEFAULT = 0,
  SG_PRIMITIVETYPE_POINTS = 1,
  SG_PRIMITIVETYPE_LINES = 2,
  SG_PRIMITIVETYPE_LINE_STRIP = 3,
  SG_PRIMITIVETYPE_TRIANGLES = 4,
  SG_PRIMITIVETYPE_TRIANGLE_STRIP = 5,
  _SG_PRIMITIVETYPE_NUM = 6,
  _SG_PRIMITIVETYPE_FORCE_U32 = 2147483647
}
global sg_filter: type <cimport,nodecl,using> = @enum(cint){
  _SG_FILTER_DEFAULT = 0,
  SG_FILTER_NEAREST = 1,
  SG_FILTER_LINEAR = 2,
  SG_FILTER_NEAREST_MIPMAP_NEAREST = 3,
  SG_FILTER_NEAREST_MIPMAP_LINEAR = 4,
  SG_FILTER_LINEAR_MIPMAP_NEAREST = 5,
  SG_FILTER_LINEAR_MIPMAP_LINEAR = 6,
  _SG_FILTER_NUM = 7,
  _SG_FILTER_FORCE_U32 = 2147483647
}
global sg_wrap: type <cimport,nodecl,using> = @enum(cint){
  _SG_WRAP_DEFAULT = 0,
  SG_WRAP_REPEAT = 1,
  SG_WRAP_CLAMP_TO_EDGE = 2,
  SG_WRAP_CLAMP_TO_BORDER = 3,
  SG_WRAP_MIRRORED_REPEAT = 4,
  _SG_WRAP_NUM = 5,
  _SG_WRAP_FORCE_U32 = 2147483647
}
global sg_border_color: type <cimport,nodecl,using> = @enum(cint){
  _SG_BORDERCOLOR_DEFAULT = 0,
  SG_BORDERCOLOR_TRANSPARENT_BLACK = 1,
  SG_BORDERCOLOR_OPAQUE_BLACK = 2,
  SG_BORDERCOLOR_OPAQUE_WHITE = 3,
  _SG_BORDERCOLOR_NUM = 4,
  _SG_BORDERCOLOR_FORCE_U32 = 2147483647
}
global sg_vertex_format: type <cimport,nodecl,using> = @enum(cint){
  SG_VERTEXFORMAT_INVALID = 0,
  SG_VERTEXFORMAT_FLOAT = 1,
  SG_VERTEXFORMAT_FLOAT2 = 2,
  SG_VERTEXFORMAT_FLOAT3 = 3,
  SG_VERTEXFORMAT_FLOAT4 = 4,
  SG_VERTEXFORMAT_BYTE4 = 5,
  SG_VERTEXFORMAT_BYTE4N = 6,
  SG_VERTEXFORMAT_UBYTE4 = 7,
  SG_VERTEXFORMAT_UBYTE4N = 8,
  SG_VERTEXFORMAT_SHORT2 = 9,
  SG_VERTEXFORMAT_SHORT2N = 10,
  SG_VERTEXFORMAT_USHORT2N = 11,
  SG_VERTEXFORMAT_SHORT4 = 12,
  SG_VERTEXFORMAT_SHORT4N = 13,
  SG_VERTEXFORMAT_USHORT4N = 14,
  SG_VERTEXFORMAT_UINT10_N2 = 15,
  SG_VERTEXFORMAT_HALF2 = 16,
  SG_VERTEXFORMAT_HALF4 = 17,
  _SG_VERTEXFORMAT_NUM = 18,
  _SG_VERTEXFORMAT_FORCE_U32 = 2147483647
}
global sg_vertex_step: type <cimport,nodecl,using> = @enum(cint){
  _SG_VERTEXSTEP_DEFAULT = 0,
  SG_VERTEXSTEP_PER_VERTEX = 1,
  SG_VERTEXSTEP_PER_INSTANCE = 2,
  _SG_VERTEXSTEP_NUM = 3,
  _SG_VERTEXSTEP_FORCE_U32 = 2147483647
}
global sg_uniform_type: type <cimport,nodecl,using> = @enum(cint){
  SG_UNIFORMTYPE_INVALID = 0,
  SG_UNIFORMTYPE_FLOAT = 1,
  SG_UNIFORMTYPE_FLOAT2 = 2,
  SG_UNIFORMTYPE_FLOAT3 = 3,
  SG_UNIFORMTYPE_FLOAT4 = 4,
  SG_UNIFORMTYPE_INT = 5,
  SG_UNIFORMTYPE_INT2 = 6,
  SG_UNIFORMTYPE_INT3 = 7,
  SG_UNIFORMTYPE_INT4 = 8,
  SG_UNIFORMTYPE_MAT4 = 9,
  _SG_UNIFORMTYPE_NUM = 10,
  _SG_UNIFORMTYPE_FORCE_U32 = 2147483647
}
global sg_uniform_layout: type <cimport,nodecl,using> = @enum(cint){
  _SG_UNIFORMLAYOUT_DEFAULT = 0,
  SG_UNIFORMLAYOUT_NATIVE = 1,
  SG_UNIFORMLAYOUT_STD140 = 2,
  _SG_UNIFORMLAYOUT_NUM = 3,
  _SG_UNIFORMLAYOUT_FORCE_U32 = 2147483647
}
global sg_cull_mode: type <cimport,nodecl,using> = @enum(cint){
  _SG_CULLMODE_DEFAULT = 0,
  SG_CULLMODE_NONE = 1,
  SG_CULLMODE_FRONT = 2,
  SG_CULLMODE_BACK = 3,
  _SG_CULLMODE_NUM = 4,
  _SG_CULLMODE_FORCE_U32 = 2147483647
}
global sg_face_winding: type <cimport,nodecl,using> = @enum(cint){
  _SG_FACEWINDING_DEFAULT = 0,
  SG_FACEWINDING_CCW = 1,
  SG_FACEWINDING_CW = 2,
  _SG_FACEWINDING_NUM = 3,
  _SG_FACEWINDING_FORCE_U32 = 2147483647
}
global sg_compare_func: type <cimport,nodecl,using> = @enum(cint){
  _SG_COMPAREFUNC_DEFAULT = 0,
  SG_COMPAREFUNC_NEVER = 1,
  SG_COMPAREFUNC_LESS = 2,
  SG_COMPAREFUNC_EQUAL = 3,
  SG_COMPAREFUNC_LESS_EQUAL = 4,
  SG_COMPAREFUNC_GREATER = 5,
  SG_COMPAREFUNC_NOT_EQUAL = 6,
  SG_COMPAREFUNC_GREATER_EQUAL = 7,
  SG_COMPAREFUNC_ALWAYS = 8,
  _SG_COMPAREFUNC_NUM = 9,
  _SG_COMPAREFUNC_FORCE_U32 = 2147483647
}
global sg_stencil_op: type <cimport,nodecl,using> = @enum(cint){
  _SG_STENCILOP_DEFAULT = 0,
  SG_STENCILOP_KEEP = 1,
  SG_STENCILOP_ZERO = 2,
  SG_STENCILOP_REPLACE = 3,
  SG_STENCILOP_INCR_CLAMP = 4,
  SG_STENCILOP_DECR_CLAMP = 5,
  SG_STENCILOP_INVERT = 6,
  SG_STENCILOP_INCR_WRAP = 7,
  SG_STENCILOP_DECR_WRAP = 8,
  _SG_STENCILOP_NUM = 9,
  _SG_STENCILOP_FORCE_U32 = 2147483647
}
global sg_blend_factor: type <cimport,nodecl,using> = @enum(cint){
  _SG_BLENDFACTOR_DEFAULT = 0,
  SG_BLENDFACTOR_ZERO = 1,
  SG_BLENDFACTOR_ONE = 2,
  SG_BLENDFACTOR_SRC_COLOR = 3,
  SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
  SG_BLENDFACTOR_SRC_ALPHA = 5,
  SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
  SG_BLENDFACTOR_DST_COLOR = 7,
  SG_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
  SG_BLENDFACTOR_DST_ALPHA = 9,
  SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
  SG_BLENDFACTOR_SRC_ALPHA_SATURATED = 11,
  SG_BLENDFACTOR_BLEND_COLOR = 12,
  SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR = 13,
  SG_BLENDFACTOR_BLEND_ALPHA = 14,
  SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA = 15,
  _SG_BLENDFACTOR_NUM = 16,
  _SG_BLENDFACTOR_FORCE_U32 = 2147483647
}
global sg_blend_op: type <cimport,nodecl,using> = @enum(cint){
  _SG_BLENDOP_DEFAULT = 0,
  SG_BLENDOP_ADD = 1,
  SG_BLENDOP_SUBTRACT = 2,
  SG_BLENDOP_REVERSE_SUBTRACT = 3,
  _SG_BLENDOP_NUM = 4,
  _SG_BLENDOP_FORCE_U32 = 2147483647
}
global sg_color_mask: type <cimport,nodecl,using> = @enum(cint){
  _SG_COLORMASK_DEFAULT = 0,
  SG_COLORMASK_NONE = 16,
  SG_COLORMASK_R = 1,
  SG_COLORMASK_G = 2,
  SG_COLORMASK_RG = 3,
  SG_COLORMASK_B = 4,
  SG_COLORMASK_RB = 5,
  SG_COLORMASK_GB = 6,
  SG_COLORMASK_RGB = 7,
  SG_COLORMASK_A = 8,
  SG_COLORMASK_RA = 9,
  SG_COLORMASK_GA = 10,
  SG_COLORMASK_RGA = 11,
  SG_COLORMASK_BA = 12,
  SG_COLORMASK_RBA = 13,
  SG_COLORMASK_GBA = 14,
  SG_COLORMASK_RGBA = 15,
  _SG_COLORMASK_FORCE_U32 = 2147483647
}
global sg_load_action: type <cimport,nodecl,using> = @enum(cint){
  _SG_LOADACTION_DEFAULT = 0,
  SG_LOADACTION_CLEAR = 1,
  SG_LOADACTION_LOAD = 2,
  SG_LOADACTION_DONTCARE = 3,
  _SG_LOADACTION_FORCE_U32 = 2147483647
}
global sg_store_action: type <cimport,nodecl,using> = @enum(cint){
  _SG_STOREACTION_DEFAULT = 0,
  SG_STOREACTION_STORE = 1,
  SG_STOREACTION_DONTCARE = 2,
  _SG_STOREACTION_FORCE_U32 = 2147483647
}
global sg_color_attachment_action: type <cimport,nodecl> = @record{
  load_action: sg_load_action,
  store_action: sg_store_action,
  clear_value: sg_color
}
global sg_depth_attachment_action: type <cimport,nodecl> = @record{
  load_action: sg_load_action,
  store_action: sg_store_action,
  clear_value: float32
}
global sg_stencil_attachment_action: type <cimport,nodecl> = @record{
  load_action: sg_load_action,
  store_action: sg_store_action,
  clear_value: uint8
}
global sg_pass_action: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  colors: [4]sg_color_attachment_action,
  depth: sg_depth_attachment_action,
  stencil: sg_stencil_attachment_action,
  _end_canary: uint32
}
global sg_bindings: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  vertex_buffers: [8]sg_buffer,
  vertex_buffer_offsets: [8]cint,
  index_buffer: sg_buffer,
  index_buffer_offset: cint,
  vs_images: [12]sg_image,
  fs_images: [12]sg_image,
  _end_canary: uint32
}
global sg_buffer_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  size: csize,
  type: sg_buffer_type,
  usage: sg_usage,
  data: sg_range,
  label: cstring,
  gl_buffers: [2]uint32,
  mtl_buffers: [2]pointer,
  d3d11_buffer: pointer,
  wgpu_buffer: pointer,
  _end_canary: uint32
}
global sg_image_data: type <cimport,nodecl> = @record{
  subimage: [6][16]sg_range
}
global sg_image_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  type: sg_image_type,
  render_target: boolean,
  width: cint,
  height: cint,
  num_slices: cint,
  num_mipmaps: cint,
  usage: sg_usage,
  pixel_format: sg_pixel_format,
  sample_count: cint,
  min_filter: sg_filter,
  mag_filter: sg_filter,
  wrap_u: sg_wrap,
  wrap_v: sg_wrap,
  wrap_w: sg_wrap,
  border_color: sg_border_color,
  max_anisotropy: uint32,
  min_lod: float32,
  max_lod: float32,
  data: sg_image_data,
  label: cstring,
  gl_textures: [2]uint32,
  gl_texture_target: uint32,
  mtl_textures: [2]pointer,
  d3d11_texture: pointer,
  d3d11_shader_resource_view: pointer,
  wgpu_texture: pointer,
  _end_canary: uint32
}
global sg_shader_attr_desc: type <cimport,nodecl> = @record{
  name: cstring,
  sem_name: cstring,
  sem_index: cint
}
global sg_shader_uniform_desc: type <cimport,nodecl> = @record{
  name: cstring,
  type: sg_uniform_type,
  array_count: cint
}
global sg_shader_uniform_block_desc: type <cimport,nodecl> = @record{
  size: csize,
  layout: sg_uniform_layout,
  uniforms: [16]sg_shader_uniform_desc
}
global sg_shader_image_desc: type <cimport,nodecl> = @record{
  name: cstring,
  image_type: sg_image_type,
  sampler_type: sg_sampler_type
}
global sg_shader_stage_desc: type <cimport,nodecl> = @record{
  source: cstring,
  bytecode: sg_range,
  entry: cstring,
  d3d11_target: cstring,
  uniform_blocks: [4]sg_shader_uniform_block_desc,
  images: [12]sg_shader_image_desc
}
global sg_shader_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  attrs: [16]sg_shader_attr_desc,
  vs: sg_shader_stage_desc,
  fs: sg_shader_stage_desc,
  label: cstring,
  _end_canary: uint32
}
global sg_buffer_layout_desc: type <cimport,nodecl> = @record{
  stride: cint,
  step_func: sg_vertex_step,
  step_rate: cint
}
global sg_vertex_attr_desc: type <cimport,nodecl> = @record{
  buffer_index: cint,
  offset: cint,
  format: sg_vertex_format
}
global sg_layout_desc: type <cimport,nodecl> = @record{
  buffers: [8]sg_buffer_layout_desc,
  attrs: [16]sg_vertex_attr_desc
}
global sg_stencil_face_state: type <cimport,nodecl> = @record{
  compare: sg_compare_func,
  fail_op: sg_stencil_op,
  depth_fail_op: sg_stencil_op,
  pass_op: sg_stencil_op
}
global sg_stencil_state: type <cimport,nodecl> = @record{
  enabled: boolean,
  front: sg_stencil_face_state,
  back: sg_stencil_face_state,
  read_mask: uint8,
  write_mask: uint8,
  ref: uint8
}
global sg_depth_state: type <cimport,nodecl> = @record{
  pixel_format: sg_pixel_format,
  compare: sg_compare_func,
  write_enabled: boolean,
  bias: float32,
  bias_slope_scale: float32,
  bias_clamp: float32
}
global sg_blend_state: type <cimport,nodecl> = @record{
  enabled: boolean,
  src_factor_rgb: sg_blend_factor,
  dst_factor_rgb: sg_blend_factor,
  op_rgb: sg_blend_op,
  src_factor_alpha: sg_blend_factor,
  dst_factor_alpha: sg_blend_factor,
  op_alpha: sg_blend_op
}
global sg_color_state: type <cimport,nodecl> = @record{
  pixel_format: sg_pixel_format,
  write_mask: sg_color_mask,
  blend: sg_blend_state
}
global sg_pipeline_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  shader: sg_shader,
  layout: sg_layout_desc,
  depth: sg_depth_state,
  stencil: sg_stencil_state,
  color_count: cint,
  colors: [4]sg_color_state,
  primitive_type: sg_primitive_type,
  index_type: sg_index_type,
  cull_mode: sg_cull_mode,
  face_winding: sg_face_winding,
  sample_count: cint,
  blend_color: sg_color,
  alpha_to_coverage_enabled: boolean,
  label: cstring,
  _end_canary: uint32
}
global sg_pass_attachment_desc: type <cimport,nodecl> = @record{
  image: sg_image,
  mip_level: cint,
  slice: cint
}
global sg_pass_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  color_attachments: [4]sg_pass_attachment_desc,
  resolve_attachments: [4]sg_pass_attachment_desc,
  depth_stencil_attachment: sg_pass_attachment_desc,
  label: cstring,
  _end_canary: uint32
}
global sg_trace_hooks: type <cimport,nodecl> = @record{
  user_data: pointer,
  reset_state_cache: function(user_data: pointer): void,
  make_buffer: function(desc: *sg_buffer_desc, result: sg_buffer, user_data: pointer): void,
  make_image: function(desc: *sg_image_desc, result: sg_image, user_data: pointer): void,
  make_shader: function(desc: *sg_shader_desc, result: sg_shader, user_data: pointer): void,
  make_pipeline: function(desc: *sg_pipeline_desc, result: sg_pipeline, user_data: pointer): void,
  make_pass: function(desc: *sg_pass_desc, result: sg_pass, user_data: pointer): void,
  destroy_buffer: function(buf: sg_buffer, user_data: pointer): void,
  destroy_image: function(img: sg_image, user_data: pointer): void,
  destroy_shader: function(shd: sg_shader, user_data: pointer): void,
  destroy_pipeline: function(pip: sg_pipeline, user_data: pointer): void,
  destroy_pass: function(pass: sg_pass, user_data: pointer): void,
  update_buffer: function(buf: sg_buffer, data: *sg_range, user_data: pointer): void,
  update_image: function(img: sg_image, data: *sg_image_data, user_data: pointer): void,
  append_buffer: function(buf: sg_buffer, data: *sg_range, result: cint, user_data: pointer): void,
  begin_default_pass: function(pass_action: *sg_pass_action, width: cint, height: cint, user_data: pointer): void,
  begin_pass: function(pass: sg_pass, pass_action: *sg_pass_action, user_data: pointer): void,
  apply_viewport: function(x: cint, y: cint, width: cint, height: cint, origin_top_left: boolean, user_data: pointer): void,
  apply_scissor_rect: function(x: cint, y: cint, width: cint, height: cint, origin_top_left: boolean, user_data: pointer): void,
  apply_pipeline: function(pip: sg_pipeline, user_data: pointer): void,
  apply_bindings: function(bindings: *sg_bindings, user_data: pointer): void,
  apply_uniforms: function(stage: sg_shader_stage, ub_index: cint, data: *sg_range, user_data: pointer): void,
  draw: function(base_element: cint, num_elements: cint, num_instances: cint, user_data: pointer): void,
  end_pass: function(user_data: pointer): void,
  commit: function(user_data: pointer): void,
  alloc_buffer: function(result: sg_buffer, user_data: pointer): void,
  alloc_image: function(result: sg_image, user_data: pointer): void,
  alloc_shader: function(result: sg_shader, user_data: pointer): void,
  alloc_pipeline: function(result: sg_pipeline, user_data: pointer): void,
  alloc_pass: function(result: sg_pass, user_data: pointer): void,
  dealloc_buffer: function(buf_id: sg_buffer, user_data: pointer): void,
  dealloc_image: function(img_id: sg_image, user_data: pointer): void,
  dealloc_shader: function(shd_id: sg_shader, user_data: pointer): void,
  dealloc_pipeline: function(pip_id: sg_pipeline, user_data: pointer): void,
  dealloc_pass: function(pass_id: sg_pass, user_data: pointer): void,
  init_buffer: function(buf_id: sg_buffer, desc: *sg_buffer_desc, user_data: pointer): void,
  init_image: function(img_id: sg_image, desc: *sg_image_desc, user_data: pointer): void,
  init_shader: function(shd_id: sg_shader, desc: *sg_shader_desc, user_data: pointer): void,
  init_pipeline: function(pip_id: sg_pipeline, desc: *sg_pipeline_desc, user_data: pointer): void,
  init_pass: function(pass_id: sg_pass, desc: *sg_pass_desc, user_data: pointer): void,
  uninit_buffer: function(buf_id: sg_buffer, user_data: pointer): void,
  uninit_image: function(img_id: sg_image, user_data: pointer): void,
  uninit_shader: function(shd_id: sg_shader, user_data: pointer): void,
  uninit_pipeline: function(pip_id: sg_pipeline, user_data: pointer): void,
  uninit_pass: function(pass_id: sg_pass, user_data: pointer): void,
  fail_buffer: function(buf_id: sg_buffer, user_data: pointer): void,
  fail_image: function(img_id: sg_image, user_data: pointer): void,
  fail_shader: function(shd_id: sg_shader, user_data: pointer): void,
  fail_pipeline: function(pip_id: sg_pipeline, user_data: pointer): void,
  fail_pass: function(pass_id: sg_pass, user_data: pointer): void,
  push_debug_group: function(name: cstring, user_data: pointer): void,
  pop_debug_group: function(user_data: pointer): void,
  err_buffer_pool_exhausted: function(user_data: pointer): void,
  err_image_pool_exhausted: function(user_data: pointer): void,
  err_shader_pool_exhausted: function(user_data: pointer): void,
  err_pipeline_pool_exhausted: function(user_data: pointer): void,
  err_pass_pool_exhausted: function(user_data: pointer): void,
  err_context_mismatch: function(user_data: pointer): void,
  err_pass_invalid: function(user_data: pointer): void,
  err_draw_invalid: function(user_data: pointer): void,
  err_bindings_invalid: function(user_data: pointer): void
}
global sg_slot_info: type <cimport,nodecl> = @record{
  state: sg_resource_state,
  res_id: uint32,
  ctx_id: uint32
}
global sg_buffer_info: type <cimport,nodecl> = @record{
  slot: sg_slot_info,
  update_frame_index: uint32,
  append_frame_index: uint32,
  append_pos: cint,
  append_overflow: boolean,
  num_slots: cint,
  active_slot: cint
}
global sg_image_info: type <cimport,nodecl> = @record{
  slot: sg_slot_info,
  upd_frame_index: uint32,
  num_slots: cint,
  active_slot: cint
}
global sg_shader_info: type <cimport,nodecl> = @record{
  slot: sg_slot_info
}
global sg_pipeline_info: type <cimport,nodecl> = @record{
  slot: sg_slot_info
}
global sg_pass_info: type <cimport,nodecl> = @record{
  slot: sg_slot_info
}
global sg_log_item: type <cimport,nodecl,using> = @enum(cint){
  SG_LOGITEM_OK = 0,
  SG_LOGITEM_MALLOC_FAILED = 1,
  SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED = 2,
  SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED = 3,
  SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED = 4,
  SG_LOGITEM_GL_SHADER_COMPILATION_FAILED = 5,
  SG_LOGITEM_GL_SHADER_LINKING_FAILED = 6,
  SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER = 7,
  SG_LOGITEM_GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER = 8,
  SG_LOGITEM_GL_FRAMEBUFFER_INCOMPLETE = 9,
  SG_LOGITEM_GL_MSAA_FRAMEBUFFER_INCOMPLETE = 10,
  SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED = 11,
  SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 12,
  SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED = 13,
  SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 14,
  SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED = 15,
  SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED = 16,
  SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 17,
  SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED = 18,
  SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED = 19,
  SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED = 20,
  SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED = 21,
  SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED = 22,
  SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED = 23,
  SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT = 24,
  SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED = 25,
  SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED = 26,
  SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED = 27,
  SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED = 28,
  SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED = 29,
  SG_LOGITEM_D3D11_CREATE_RTV_FAILED = 30,
  SG_LOGITEM_D3D11_CREATE_DSV_FAILED = 31,
  SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED = 32,
  SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED = 33,
  SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED = 34,
  SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED = 35,
  SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED = 36,
  SG_LOGITEM_METAL_SHADER_CREATION_FAILED = 37,
  SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT = 38,
  SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND = 39,
  SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND = 40,
  SG_LOGITEM_METAL_CREATE_RPS_FAILED = 41,
  SG_LOGITEM_METAL_CREATE_RPS_OUTPUT = 42,
  SG_LOGITEM_WGPU_MAP_UNIFORM_BUFFER_FAILED = 43,
  SG_LOGITEM_WGPU_STAGING_BUFFER_FULL_COPY_TO_BUFFER = 44,
  SG_LOGITEM_WGPU_STAGING_BUFFER_FULL_COPY_TO_TEXTURE = 45,
  SG_LOGITEM_WGPU_RESET_STATE_CACHE_FIXME = 46,
  SG_LOGITEM_WGPU_ACTIVATE_CONTEXT_FIXME = 47,
  SG_LOGITEM_UNINIT_BUFFER_ACTIVE_CONTEXT_MISMATCH = 48,
  SG_LOGITEM_UNINIT_IMAGE_ACTIVE_CONTEXT_MISMATCH = 49,
  SG_LOGITEM_UNINIT_SHADER_ACTIVE_CONTEXT_MISMATCH = 50,
  SG_LOGITEM_UNINIT_PIPELINE_ACTIVE_CONTEXT_MISMATCH = 51,
  SG_LOGITEM_UNINIT_PASS_ACTIVE_CONTEXT_MISMATCH = 52,
  SG_LOGITEM_IDENTICAL_COMMIT_LISTENER = 53,
  SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL = 54,
  SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED = 55,
  SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE = 56,
  SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE = 57,
  SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE = 58,
  SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE = 59,
  SG_LOGITEM_DEALLOC_PASS_INVALID_STATE = 60,
  SG_LOGITEM_INIT_BUFFER_INVALID_STATE = 61,
  SG_LOGITEM_INIT_IMAGE_INVALID_STATE = 62,
  SG_LOGITEM_INIT_SHADER_INVALID_STATE = 63,
  SG_LOGITEM_INIT_PIPELINE_INVALID_STATE = 64,
  SG_LOGITEM_INIT_PASS_INVALID_STATE = 65,
  SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE = 66,
  SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE = 67,
  SG_LOGITEM_UNINIT_SHADER_INVALID_STATE = 68,
  SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE = 69,
  SG_LOGITEM_UNINIT_PASS_INVALID_STATE = 70,
  SG_LOGITEM_FAIL_BUFFER_INVALID_STATE = 71,
  SG_LOGITEM_FAIL_IMAGE_INVALID_STATE = 72,
  SG_LOGITEM_FAIL_SHADER_INVALID_STATE = 73,
  SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE = 74,
  SG_LOGITEM_FAIL_PASS_INVALID_STATE = 75,
  SG_LOGITEM_BUFFER_POOL_EXHAUSTED = 76,
  SG_LOGITEM_IMAGE_POOL_EXHAUSTED = 77,
  SG_LOGITEM_SHADER_POOL_EXHAUSTED = 78,
  SG_LOGITEM_PIPELINE_POOL_EXHAUSTED = 79,
  SG_LOGITEM_PASS_POOL_EXHAUSTED = 80,
  SG_LOGITEM_DRAW_WITHOUT_BINDINGS = 81,
  SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY = 82,
  SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE = 83,
  SG_LOGITEM_VALIDATE_BUFFERDESC_DATA = 84,
  SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE = 85,
  SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA = 86,
  SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA = 87,
  SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE = 88,
  SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY = 89,
  SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH = 90,
  SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT = 91,
  SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT = 92,
  SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT = 93,
  SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT = 94,
  SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT = 95,
  SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS = 96,
  SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_3D_IMAGE = 97,
  SG_LOGITEM_VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE = 98,
  SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE = 99,
  SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA = 100,
  SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA = 101,
  SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA = 102,
  SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE = 103,
  SG_LOGITEM_VALIDATE_SHADERDESC_CANARY = 104,
  SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE = 105,
  SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE = 106,
  SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE = 107,
  SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE = 108,
  SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS = 109,
  SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS = 110,
  SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS = 111,
  SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME = 112,
  SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH = 113,
  SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT = 114,
  SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE = 115,
  SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMGS = 116,
  SG_LOGITEM_VALIDATE_SHADERDESC_IMG_NAME = 117,
  SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS = 118,
  SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG = 119,
  SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY = 120,
  SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER = 121,
  SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS = 122,
  SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4 = 123,
  SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS = 124,
  SG_LOGITEM_VALIDATE_PASSDESC_CANARY = 125,
  SG_LOGITEM_VALIDATE_PASSDESC_NO_COLOR_ATTS = 126,
  SG_LOGITEM_VALIDATE_PASSDESC_NO_CONT_COLOR_ATTS = 127,
  SG_LOGITEM_VALIDATE_PASSDESC_IMAGE = 128,
  SG_LOGITEM_VALIDATE_PASSDESC_MIPLEVEL = 129,
  SG_LOGITEM_VALIDATE_PASSDESC_FACE = 130,
  SG_LOGITEM_VALIDATE_PASSDESC_LAYER = 131,
  SG_LOGITEM_VALIDATE_PASSDESC_SLICE = 132,
  SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_NO_RT = 133,
  SG_LOGITEM_VALIDATE_PASSDESC_COLOR_INV_PIXELFORMAT = 134,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_INV_PIXELFORMAT = 135,
  SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SIZES = 136,
  SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SAMPLE_COUNTS = 137,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_COLOR_IMAGE_MSAA = 138,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE = 139,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_SAMPLE_COUNT = 140,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_MIPLEVEL = 141,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_FACE = 142,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_LAYER = 143,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_SLICE = 144,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_NO_RT = 145,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_SIZES = 146,
  SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_FORMAT = 147,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE = 148,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_MIPLEVEL = 149,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_FACE = 150,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_LAYER = 151,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_SLICE = 152,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_NO_RT = 153,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_SIZES = 154,
  SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_SAMPLE_COUNT = 155,
  SG_LOGITEM_VALIDATE_BEGINPASS_PASS = 156,
  SG_LOGITEM_VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE = 157,
  SG_LOGITEM_VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE = 158,
  SG_LOGITEM_VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE = 159,
  SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID = 160,
  SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS = 161,
  SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID = 162,
  SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS = 163,
  SG_LOGITEM_VALIDATE_APIP_SHADER_VALID = 164,
  SG_LOGITEM_VALIDATE_APIP_ATT_COUNT = 165,
  SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT = 166,
  SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT = 167,
  SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT = 168,
  SG_LOGITEM_VALIDATE_ABND_PIPELINE = 169,
  SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS = 170,
  SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID = 171,
  SG_LOGITEM_VALIDATE_ABND_VBS = 172,
  SG_LOGITEM_VALIDATE_ABND_VB_EXISTS = 173,
  SG_LOGITEM_VALIDATE_ABND_VB_TYPE = 174,
  SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW = 175,
  SG_LOGITEM_VALIDATE_ABND_NO_IB = 176,
  SG_LOGITEM_VALIDATE_ABND_IB = 177,
  SG_LOGITEM_VALIDATE_ABND_IB_EXISTS = 178,
  SG_LOGITEM_VALIDATE_ABND_IB_TYPE = 179,
  SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW = 180,
  SG_LOGITEM_VALIDATE_ABND_VS_IMGS = 181,
  SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS = 182,
  SG_LOGITEM_VALIDATE_ABND_VS_IMG_TYPES = 183,
  SG_LOGITEM_VALIDATE_ABND_VS_IMG_MSAA = 184,
  SG_LOGITEM_VALIDATE_ABND_VS_IMG_DEPTH = 185,
  SG_LOGITEM_VALIDATE_ABND_FS_IMGS = 186,
  SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS = 187,
  SG_LOGITEM_VALIDATE_ABND_FS_IMG_TYPES = 188,
  SG_LOGITEM_VALIDATE_ABND_FS_IMG_MSAA = 189,
  SG_LOGITEM_VALIDATE_ABND_FS_IMG_DEPTH = 190,
  SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE = 191,
  SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT = 192,
  SG_LOGITEM_VALIDATE_AUB_SIZE = 193,
  SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE = 194,
  SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE = 195,
  SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE = 196,
  SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND = 197,
  SG_LOGITEM_VALIDATE_APPENDBUF_USAGE = 198,
  SG_LOGITEM_VALIDATE_APPENDBUF_SIZE = 199,
  SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE = 200,
  SG_LOGITEM_VALIDATE_UPDIMG_USAGE = 201,
  SG_LOGITEM_VALIDATE_UPDIMG_ONCE = 202,
  SG_LOGITEM_VALIDATION_FAILED = 203
}
global sg_metal_context_desc: type <cimport,nodecl> = @record{
  device: pointer,
  renderpass_descriptor_cb: function(): pointer,
  renderpass_descriptor_userdata_cb: function(a1: pointer): pointer,
  drawable_cb: function(): pointer,
  drawable_userdata_cb: function(a1: pointer): pointer,
  user_data: pointer
}
global sg_d3d11_context_desc: type <cimport,nodecl> = @record{
  device: pointer,
  device_context: pointer,
  render_target_view_cb: function(): pointer,
  render_target_view_userdata_cb: function(a1: pointer): pointer,
  depth_stencil_view_cb: function(): pointer,
  depth_stencil_view_userdata_cb: function(a1: pointer): pointer,
  user_data: pointer
}
global sg_wgpu_context_desc: type <cimport,nodecl> = @record{
  device: pointer,
  render_view_cb: function(): pointer,
  render_view_userdata_cb: function(a1: pointer): pointer,
  resolve_view_cb: function(): pointer,
  resolve_view_userdata_cb: function(a1: pointer): pointer,
  depth_stencil_view_cb: function(): pointer,
  depth_stencil_view_userdata_cb: function(a1: pointer): pointer,
  user_data: pointer
}
global sg_context_desc: type <cimport,nodecl> = @record{
  color_format: sg_pixel_format,
  depth_format: sg_pixel_format,
  sample_count: cint,
  metal: sg_metal_context_desc,
  d3d11: sg_d3d11_context_desc,
  wgpu: sg_wgpu_context_desc
}
global sg_commit_listener: type <cimport,nodecl> = @record{
  func: function(user_data: pointer): void,
  user_data: pointer
}
global sg_allocator: type <cimport,nodecl> = @record{
  alloc: function(size: csize, user_data: pointer): pointer,
  free: function(ptr: pointer, user_data: pointer): void,
  user_data: pointer
}
global sg_logger: type <cimport,nodecl> = @record{
  func: function(tag: cstring, log_level: uint32, log_item_id: uint32, message_or_null: cstring, line_nr: uint32, filename_or_null: cstring, user_data: pointer): void,
  user_data: pointer
}
global sg_desc: type <cimport,nodecl> = @record{
  _start_canary: uint32,
  buffer_pool_size: cint,
  image_pool_size: cint,
  shader_pool_size: cint,
  pipeline_pool_size: cint,
  pass_pool_size: cint,
  context_pool_size: cint,
  uniform_buffer_size: cint,
  staging_buffer_size: cint,
  sampler_cache_size: cint,
  max_commit_listeners: cint,
  disable_validation: boolean,
  allocator: sg_allocator,
  logger: sg_logger,
  context: sg_context_desc,
  _end_canary: uint32
}
global sgp_error: type <cimport,nodecl,using> = @enum(cint){
  SGP_NO_ERROR = 0,
  SGP_ERROR_SOKOL_INVALID = 1,
  SGP_ERROR_VERTICES_FULL = 2,
  SGP_ERROR_UNIFORMS_FULL = 3,
  SGP_ERROR_COMMANDS_FULL = 4,
  SGP_ERROR_VERTICES_OVERFLOW = 5,
  SGP_ERROR_TRANSFORM_STACK_OVERFLOW = 6,
  SGP_ERROR_TRANSFORM_STACK_UNDERFLOW = 7,
  SGP_ERROR_STATE_STACK_OVERFLOW = 8,
  SGP_ERROR_STATE_STACK_UNDERFLOW = 9,
  SGP_ERROR_ALLOC_FAILED = 10,
  SGP_ERROR_MAKE_VERTEX_BUFFER_FAILED = 11,
  SGP_ERROR_MAKE_WHITE_IMAGE_FAILED = 12,
  SGP_ERROR_MAKE_COMMON_SHADER_FAILED = 13,
  SGP_ERROR_MAKE_COMMON_PIPELINE_FAILED = 14
}
global sgp_blend_mode: type <cimport,nodecl,using> = @enum(cint){
  SGP_BLENDMODE_NONE = 0,
  SGP_BLENDMODE_BLEND = 1,
  SGP_BLENDMODE_ADD = 2,
  SGP_BLENDMODE_MOD = 3,
  SGP_BLENDMODE_MUL = 4,
  _SGP_BLENDMODE_NUM = 5
}
global sgp_isize: type <cimport,nodecl> = @record{
  w: cint,
  h: cint
}
global sgp_irect: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  w: cint,
  h: cint
}
global sgp_rect: type <cimport,nodecl> = @record{
  x: float32,
  y: float32,
  w: float32,
  h: float32
}
global sgp_textured_rect: type <cimport,nodecl> = @record{
  dst: sgp_rect,
  src: sgp_rect
}
global sgp_vec2: type <cimport,nodecl> = @record{
  x: float32,
  y: float32
}
global sgp_point: type <cimport,nodecl> = @sgp_vec2
global sgp_line: type <cimport,nodecl> = @record{
  a: sgp_point,
  b: sgp_point
}
global sgp_triangle: type <cimport,nodecl> = @record{
  a: sgp_point,
  b: sgp_point,
  c: sgp_point
}
global sgp_mat2x3: type <cimport,nodecl> = @record{
  v: [2][3]float32
}
global sgp_color: type <cimport,nodecl> = @record{
  r: float32,
  g: float32,
  b: float32,
  a: float32
}
global sgp_uniform: type <cimport,nodecl> = @record{
  size: uint32,
  content: [4]float32
}
global sgp_images_uniform: type <cimport,nodecl> = @record{
  count: uint32,
  images: [4]sg_image
}
global sgp_state: type <cimport,nodecl> = @record{
  frame_size: sgp_isize,
  viewport: sgp_irect,
  scissor: sgp_irect,
  proj: sgp_mat2x3,
  transform: sgp_mat2x3,
  mvp: sgp_mat2x3,
  thickness: float32,
  color: sgp_color,
  images: sgp_images_uniform,
  uniform: sgp_uniform,
  blend_mode: sgp_blend_mode,
  pipeline: sg_pipeline,
  _base_vertex: uint32,
  _base_uniform: uint32,
  _base_command: uint32
}
global sgp_desc: type <cimport,nodecl> = @record{
  max_vertices: uint32,
  max_commands: uint32
}
global sgp_pipeline_desc: type <cimport,nodecl> = @record{
  shader: sg_shader_desc,
  primitive_type: sg_primitive_type,
  blend_mode: sgp_blend_mode
}
global SAPP_MAX_TOUCHPOINTS: cint <comptime> = 8
global SAPP_MAX_MOUSEBUTTONS: cint <comptime> = 3
global SAPP_MAX_KEYCODES: cint <comptime> = 512
global SAPP_MAX_ICONIMAGES: cint <comptime> = 8
global sapp_event_type: type <cimport,nodecl,using> = @enum(cint){
  SAPP_EVENTTYPE_INVALID = 0,
  SAPP_EVENTTYPE_KEY_DOWN = 1,
  SAPP_EVENTTYPE_KEY_UP = 2,
  SAPP_EVENTTYPE_CHAR = 3,
  SAPP_EVENTTYPE_MOUSE_DOWN = 4,
  SAPP_EVENTTYPE_MOUSE_UP = 5,
  SAPP_EVENTTYPE_MOUSE_SCROLL = 6,
  SAPP_EVENTTYPE_MOUSE_MOVE = 7,
  SAPP_EVENTTYPE_MOUSE_ENTER = 8,
  SAPP_EVENTTYPE_MOUSE_LEAVE = 9,
  SAPP_EVENTTYPE_TOUCHES_BEGAN = 10,
  SAPP_EVENTTYPE_TOUCHES_MOVED = 11,
  SAPP_EVENTTYPE_TOUCHES_ENDED = 12,
  SAPP_EVENTTYPE_TOUCHES_CANCELLED = 13,
  SAPP_EVENTTYPE_RESIZED = 14,
  SAPP_EVENTTYPE_ICONIFIED = 15,
  SAPP_EVENTTYPE_RESTORED = 16,
  SAPP_EVENTTYPE_FOCUSED = 17,
  SAPP_EVENTTYPE_UNFOCUSED = 18,
  SAPP_EVENTTYPE_SUSPENDED = 19,
  SAPP_EVENTTYPE_RESUMED = 20,
  SAPP_EVENTTYPE_QUIT_REQUESTED = 21,
  SAPP_EVENTTYPE_CLIPBOARD_PASTED = 22,
  SAPP_EVENTTYPE_FILES_DROPPED = 23,
  _SAPP_EVENTTYPE_NUM = 24,
  _SAPP_EVENTTYPE_FORCE_U32 = 2147483647
}
global sapp_keycode: type <cimport,nodecl,using> = @enum(cint){
  SAPP_KEYCODE_INVALID = 0,
  SAPP_KEYCODE_SPACE = 32,
  SAPP_KEYCODE_APOSTROPHE = 39,
  SAPP_KEYCODE_COMMA = 44,
  SAPP_KEYCODE_MINUS = 45,
  SAPP_KEYCODE_PERIOD = 46,
  SAPP_KEYCODE_SLASH = 47,
  SAPP_KEYCODE_0 = 48,
  SAPP_KEYCODE_1 = 49,
  SAPP_KEYCODE_2 = 50,
  SAPP_KEYCODE_3 = 51,
  SAPP_KEYCODE_4 = 52,
  SAPP_KEYCODE_5 = 53,
  SAPP_KEYCODE_6 = 54,
  SAPP_KEYCODE_7 = 55,
  SAPP_KEYCODE_8 = 56,
  SAPP_KEYCODE_9 = 57,
  SAPP_KEYCODE_SEMICOLON = 59,
  SAPP_KEYCODE_EQUAL = 61,
  SAPP_KEYCODE_A = 65,
  SAPP_KEYCODE_B = 66,
  SAPP_KEYCODE_C = 67,
  SAPP_KEYCODE_D = 68,
  SAPP_KEYCODE_E = 69,
  SAPP_KEYCODE_F = 70,
  SAPP_KEYCODE_G = 71,
  SAPP_KEYCODE_H = 72,
  SAPP_KEYCODE_I = 73,
  SAPP_KEYCODE_J = 74,
  SAPP_KEYCODE_K = 75,
  SAPP_KEYCODE_L = 76,
  SAPP_KEYCODE_M = 77,
  SAPP_KEYCODE_N = 78,
  SAPP_KEYCODE_O = 79,
  SAPP_KEYCODE_P = 80,
  SAPP_KEYCODE_Q = 81,
  SAPP_KEYCODE_R = 82,
  SAPP_KEYCODE_S = 83,
  SAPP_KEYCODE_T = 84,
  SAPP_KEYCODE_U = 85,
  SAPP_KEYCODE_V = 86,
  SAPP_KEYCODE_W = 87,
  SAPP_KEYCODE_X = 88,
  SAPP_KEYCODE_Y = 89,
  SAPP_KEYCODE_Z = 90,
  SAPP_KEYCODE_LEFT_BRACKET = 91,
  SAPP_KEYCODE_BACKSLASH = 92,
  SAPP_KEYCODE_RIGHT_BRACKET = 93,
  SAPP_KEYCODE_GRAVE_ACCENT = 96,
  SAPP_KEYCODE_WORLD_1 = 161,
  SAPP_KEYCODE_WORLD_2 = 162,
  SAPP_KEYCODE_ESCAPE = 256,
  SAPP_KEYCODE_ENTER = 257,
  SAPP_KEYCODE_TAB = 258,
  SAPP_KEYCODE_BACKSPACE = 259,
  SAPP_KEYCODE_INSERT = 260,
  SAPP_KEYCODE_DELETE = 261,
  SAPP_KEYCODE_RIGHT = 262,
  SAPP_KEYCODE_LEFT = 263,
  SAPP_KEYCODE_DOWN = 264,
  SAPP_KEYCODE_UP = 265,
  SAPP_KEYCODE_PAGE_UP = 266,
  SAPP_KEYCODE_PAGE_DOWN = 267,
  SAPP_KEYCODE_HOME = 268,
  SAPP_KEYCODE_END = 269,
  SAPP_KEYCODE_CAPS_LOCK = 280,
  SAPP_KEYCODE_SCROLL_LOCK = 281,
  SAPP_KEYCODE_NUM_LOCK = 282,
  SAPP_KEYCODE_PRINT_SCREEN = 283,
  SAPP_KEYCODE_PAUSE = 284,
  SAPP_KEYCODE_F1 = 290,
  SAPP_KEYCODE_F2 = 291,
  SAPP_KEYCODE_F3 = 292,
  SAPP_KEYCODE_F4 = 293,
  SAPP_KEYCODE_F5 = 294,
  SAPP_KEYCODE_F6 = 295,
  SAPP_KEYCODE_F7 = 296,
  SAPP_KEYCODE_F8 = 297,
  SAPP_KEYCODE_F9 = 298,
  SAPP_KEYCODE_F10 = 299,
  SAPP_KEYCODE_F11 = 300,
  SAPP_KEYCODE_F12 = 301,
  SAPP_KEYCODE_F13 = 302,
  SAPP_KEYCODE_F14 = 303,
  SAPP_KEYCODE_F15 = 304,
  SAPP_KEYCODE_F16 = 305,
  SAPP_KEYCODE_F17 = 306,
  SAPP_KEYCODE_F18 = 307,
  SAPP_KEYCODE_F19 = 308,
  SAPP_KEYCODE_F20 = 309,
  SAPP_KEYCODE_F21 = 310,
  SAPP_KEYCODE_F22 = 311,
  SAPP_KEYCODE_F23 = 312,
  SAPP_KEYCODE_F24 = 313,
  SAPP_KEYCODE_F25 = 314,
  SAPP_KEYCODE_KP_0 = 320,
  SAPP_KEYCODE_KP_1 = 321,
  SAPP_KEYCODE_KP_2 = 322,
  SAPP_KEYCODE_KP_3 = 323,
  SAPP_KEYCODE_KP_4 = 324,
  SAPP_KEYCODE_KP_5 = 325,
  SAPP_KEYCODE_KP_6 = 326,
  SAPP_KEYCODE_KP_7 = 327,
  SAPP_KEYCODE_KP_8 = 328,
  SAPP_KEYCODE_KP_9 = 329,
  SAPP_KEYCODE_KP_DECIMAL = 330,
  SAPP_KEYCODE_KP_DIVIDE = 331,
  SAPP_KEYCODE_KP_MULTIPLY = 332,
  SAPP_KEYCODE_KP_SUBTRACT = 333,
  SAPP_KEYCODE_KP_ADD = 334,
  SAPP_KEYCODE_KP_ENTER = 335,
  SAPP_KEYCODE_KP_EQUAL = 336,
  SAPP_KEYCODE_LEFT_SHIFT = 340,
  SAPP_KEYCODE_LEFT_CONTROL = 341,
  SAPP_KEYCODE_LEFT_ALT = 342,
  SAPP_KEYCODE_LEFT_SUPER = 343,
  SAPP_KEYCODE_RIGHT_SHIFT = 344,
  SAPP_KEYCODE_RIGHT_CONTROL = 345,
  SAPP_KEYCODE_RIGHT_ALT = 346,
  SAPP_KEYCODE_RIGHT_SUPER = 347,
  SAPP_KEYCODE_MENU = 348
}
global sapp_android_tooltype: type <cimport,nodecl,using> = @enum(cint){
  SAPP_ANDROIDTOOLTYPE_UNKNOWN = 0,
  SAPP_ANDROIDTOOLTYPE_FINGER = 1,
  SAPP_ANDROIDTOOLTYPE_STYLUS = 2,
  SAPP_ANDROIDTOOLTYPE_MOUSE = 3
}
global sapp_touchpoint: type <cimport,nodecl> = @record{
  identifier: usize,
  pos_x: float32,
  pos_y: float32,
  android_tooltype: sapp_android_tooltype,
  changed: boolean
}
global sapp_mousebutton: type <cimport,nodecl,using> = @enum(cint){
  SAPP_MOUSEBUTTON_LEFT = 0,
  SAPP_MOUSEBUTTON_RIGHT = 1,
  SAPP_MOUSEBUTTON_MIDDLE = 2,
  SAPP_MOUSEBUTTON_INVALID = 256
}
global SAPP_MODIFIER_SHIFT: cint <comptime> = 1
global SAPP_MODIFIER_CTRL: cint <comptime> = 2
global SAPP_MODIFIER_ALT: cint <comptime> = 4
global SAPP_MODIFIER_SUPER: cint <comptime> = 8
global SAPP_MODIFIER_LMB: cint <comptime> = 256
global SAPP_MODIFIER_RMB: cint <comptime> = 512
global SAPP_MODIFIER_MMB: cint <comptime> = 1024
global sapp_event: type <cimport,nodecl> = @record{
  frame_count: uint64,
  type: sapp_event_type,
  key_code: sapp_keycode,
  char_code: uint32,
  key_repeat: boolean,
  modifiers: uint32,
  mouse_button: sapp_mousebutton,
  mouse_x: float32,
  mouse_y: float32,
  mouse_dx: float32,
  mouse_dy: float32,
  scroll_x: float32,
  scroll_y: float32,
  num_touches: cint,
  touches: [8]sapp_touchpoint,
  window_width: cint,
  window_height: cint,
  framebuffer_width: cint,
  framebuffer_height: cint
}
global sapp_range: type <cimport,nodecl> = @record{
  ptr: pointer,
  size: csize
}
global sapp_image_desc: type <cimport,nodecl> = @record{
  width: cint,
  height: cint,
  pixels: sapp_range
}
global sapp_icon_desc: type <cimport,nodecl> = @record{
  sokol_default: boolean,
  images: [8]sapp_image_desc
}
global sapp_allocator: type <cimport,nodecl> = @record{
  alloc: function(size: csize, user_data: pointer): pointer,
  free: function(ptr: pointer, user_data: pointer): void,
  user_data: pointer
}
global sapp_log_item: type <cimport,nodecl,using> = @enum(cint){
  SAPP_LOGITEM_OK = 0,
  SAPP_LOGITEM_MALLOC_FAILED = 1,
  SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE = 2,
  SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED = 3,
  SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED = 4,
  SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED = 5,
  SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED = 6,
  SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED = 7,
  SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED = 8,
  SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED = 9,
  SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED = 10,
  SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED = 11,
  SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED = 12,
  SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED = 13,
  SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED = 14,
  SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED = 15,
  SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED = 16,
  SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT = 17,
  SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER = 18,
  SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED = 19,
  SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED = 20,
  SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED = 21,
  SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED = 22,
  SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK = 23,
  SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK = 24,
  SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED = 25,
  SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED = 26,
  SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED = 27,
  SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND = 28,
  SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED = 29,
  SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW = 30,
  SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS = 31,
  SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG = 32,
  SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED = 33,
  SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING = 34,
  SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED = 35,
  SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED = 36,
  SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED = 37,
  SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED = 38,
  SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED = 39,
  SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED = 40,
  SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED = 41,
  SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS = 42,
  SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL = 43,
  SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED = 44,
  SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED = 45,
  SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED = 46,
  SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED = 47,
  SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED = 48,
  SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED = 49,
  SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME = 50,
  SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB = 51,
  SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB = 52,
  SAPP_LOGITEM_ANDROID_READ_MSG_FAILED = 53,
  SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED = 54,
  SAPP_LOGITEM_ANDROID_MSG_CREATE = 55,
  SAPP_LOGITEM_ANDROID_MSG_RESUME = 56,
  SAPP_LOGITEM_ANDROID_MSG_PAUSE = 57,
  SAPP_LOGITEM_ANDROID_MSG_FOCUS = 58,
  SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS = 59,
  SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW = 60,
  SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE = 61,
  SAPP_LOGITEM_ANDROID_MSG_DESTROY = 62,
  SAPP_LOGITEM_ANDROID_UNKNOWN_MSG = 63,
  SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED = 64,
  SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE = 65,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART = 66,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME = 67,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE = 68,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED = 69,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE = 70,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP = 71,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED = 72,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED = 73,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED = 74,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED = 75,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED = 76,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY = 77,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY = 78,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE = 79,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE = 80,
  SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED = 81,
  SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS = 82,
  SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH = 83,
  SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG = 84,
  SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG = 85
}
global sapp_logger: type <cimport,nodecl> = @record{
  func: function(tag: cstring, log_level: uint32, log_item_id: uint32, message_or_null: cstring, line_nr: uint32, filename_or_null: cstring, user_data: pointer): void,
  user_data: pointer
}
global sapp_desc: type <cimport,nodecl> = @record{
  init_cb: function(): void,
  frame_cb: function(): void,
  cleanup_cb: function(): void,
  event_cb: function(a1: *sapp_event): void,
  user_data: pointer,
  init_userdata_cb: function(a1: pointer): void,
  frame_userdata_cb: function(a1: pointer): void,
  cleanup_userdata_cb: function(a1: pointer): void,
  event_userdata_cb: function(a1: *sapp_event, a2: pointer): void,
  width: cint,
  height: cint,
  sample_count: cint,
  swap_interval: cint,
  high_dpi: boolean,
  fullscreen: boolean,
  alpha: boolean,
  window_title: cstring,
  enable_clipboard: boolean,
  clipboard_size: cint,
  enable_dragndrop: boolean,
  max_dropped_files: cint,
  max_dropped_file_path_length: cint,
  icon: sapp_icon_desc,
  allocator: sapp_allocator,
  logger: sapp_logger,
  gl_major_version: cint,
  gl_minor_version: cint,
  win32_console_utf8: boolean,
  win32_console_create: boolean,
  win32_console_attach: boolean,
  html5_canvas_name: cstring,
  html5_canvas_resize: boolean,
  html5_preserve_drawing_buffer: boolean,
  html5_premultiplied_alpha: boolean,
  html5_ask_leave_site: boolean,
  ios_keyboard_resizes_canvas: boolean
}
global sapp_html5_fetch_error: type <cimport,nodecl,using> = @enum(cint){
  SAPP_HTML5_FETCH_ERROR_NO_ERROR = 0,
  SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL = 1,
  SAPP_HTML5_FETCH_ERROR_OTHER = 2
}
global sapp_html5_fetch_response: type <cimport,nodecl> = @record{
  succeeded: boolean,
  error_code: sapp_html5_fetch_error,
  file_index: cint,
  data: sapp_range,
  buffer: sapp_range,
  user_data: pointer
}
global sapp_html5_fetch_request: type <cimport,nodecl> = @record{
  dropped_file_index: cint,
  callback: function(a1: *sapp_html5_fetch_response): void,
  buffer: sapp_range,
  user_data: pointer
}
global sapp_mouse_cursor: type <cimport,nodecl,using> = @enum(cint){
  SAPP_MOUSECURSOR_DEFAULT = 0,
  SAPP_MOUSECURSOR_ARROW = 1,
  SAPP_MOUSECURSOR_IBEAM = 2,
  SAPP_MOUSECURSOR_CROSSHAIR = 3,
  SAPP_MOUSECURSOR_POINTING_HAND = 4,
  SAPP_MOUSECURSOR_RESIZE_EW = 5,
  SAPP_MOUSECURSOR_RESIZE_NS = 6,
  SAPP_MOUSECURSOR_RESIZE_NWSE = 7,
  SAPP_MOUSECURSOR_RESIZE_NESW = 8,
  SAPP_MOUSECURSOR_RESIZE_ALL = 9,
  SAPP_MOUSECURSOR_NOT_ALLOWED = 10,
  _SAPP_MOUSECURSOR_NUM = 11
}
global sargs_allocator: type <cimport,nodecl> = @record{
  alloc: function(size: csize, user_data: pointer): pointer,
  free: function(ptr: pointer, user_data: pointer): void,
  user_data: pointer
}
global sargs_desc: type <cimport,nodecl> = @record{
  argc: cint,
  argv: *cstring,
  max_args: cint,
  buf_size: cint,
  allocator: sargs_allocator
}
global function sg_setup(desc: *sg_desc): void <cimport,nodecl> end
global function sg_shutdown(): void <cimport,nodecl> end
global function sg_isvalid(): boolean <cimport,nodecl> end
global function sg_reset_state_cache(): void <cimport,nodecl> end
global function sg_install_trace_hooks(trace_hooks: *sg_trace_hooks): sg_trace_hooks <cimport,nodecl> end
global function sg_push_debug_group(name: cstring): void <cimport,nodecl> end
global function sg_pop_debug_group(): void <cimport,nodecl> end
global function sg_add_commit_listener(listener: sg_commit_listener): boolean <cimport,nodecl> end
global function sg_remove_commit_listener(listener: sg_commit_listener): boolean <cimport,nodecl> end
global function sg_make_buffer(desc: *sg_buffer_desc): sg_buffer <cimport,nodecl> end
global function sg_make_image(desc: *sg_image_desc): sg_image <cimport,nodecl> end
global function sg_make_shader(desc: *sg_shader_desc): sg_shader <cimport,nodecl> end
global function sg_make_pipeline(desc: *sg_pipeline_desc): sg_pipeline <cimport,nodecl> end
global function sg_make_pass(desc: *sg_pass_desc): sg_pass <cimport,nodecl> end
global function sg_destroy_buffer(buf: sg_buffer): void <cimport,nodecl> end
global function sg_destroy_image(img: sg_image): void <cimport,nodecl> end
global function sg_destroy_shader(shd: sg_shader): void <cimport,nodecl> end
global function sg_destroy_pipeline(pip: sg_pipeline): void <cimport,nodecl> end
global function sg_destroy_pass(pass: sg_pass): void <cimport,nodecl> end
global function sg_update_buffer(buf: sg_buffer, data: *sg_range): void <cimport,nodecl> end
global function sg_update_image(img: sg_image, data: *sg_image_data): void <cimport,nodecl> end
global function sg_append_buffer(buf: sg_buffer, data: *sg_range): cint <cimport,nodecl> end
global function sg_query_buffer_overflow(buf: sg_buffer): boolean <cimport,nodecl> end
global function sg_query_buffer_will_overflow(buf: sg_buffer, size: csize): boolean <cimport,nodecl> end
global function sg_begin_default_pass(pass_action: *sg_pass_action, width: cint, height: cint): void <cimport,nodecl> end
global function sg_begin_default_passf(pass_action: *sg_pass_action, width: float32, height: float32): void <cimport,nodecl> end
global function sg_begin_pass(pass: sg_pass, pass_action: *sg_pass_action): void <cimport,nodecl> end
global function sg_apply_viewport(x: cint, y: cint, width: cint, height: cint, origin_top_left: boolean): void <cimport,nodecl> end
global function sg_apply_viewportf(x: float32, y: float32, width: float32, height: float32, origin_top_left: boolean): void <cimport,nodecl> end
global function sg_apply_scissor_rect(x: cint, y: cint, width: cint, height: cint, origin_top_left: boolean): void <cimport,nodecl> end
global function sg_apply_scissor_rectf(x: float32, y: float32, width: float32, height: float32, origin_top_left: boolean): void <cimport,nodecl> end
global function sg_apply_pipeline(pip: sg_pipeline): void <cimport,nodecl> end
global function sg_apply_bindings(bindings: *sg_bindings): void <cimport,nodecl> end
global function sg_apply_uniforms(stage: sg_shader_stage, ub_index: cint, data: *sg_range): void <cimport,nodecl> end
global function sg_draw(base_element: cint, num_elements: cint, num_instances: cint): void <cimport,nodecl> end
global function sg_end_pass(): void <cimport,nodecl> end
global function sg_commit(): void <cimport,nodecl> end
global function sg_query_desc(): sg_desc <cimport,nodecl> end
global function sg_query_backend(): sg_backend <cimport,nodecl> end
global function sg_query_features(): sg_features <cimport,nodecl> end
global function sg_query_limits(): sg_limits <cimport,nodecl> end
global function sg_query_pixelformat(fmt: sg_pixel_format): sg_pixelformat_info <cimport,nodecl> end
global function sg_query_buffer_state(buf: sg_buffer): sg_resource_state <cimport,nodecl> end
global function sg_query_image_state(img: sg_image): sg_resource_state <cimport,nodecl> end
global function sg_query_shader_state(shd: sg_shader): sg_resource_state <cimport,nodecl> end
global function sg_query_pipeline_state(pip: sg_pipeline): sg_resource_state <cimport,nodecl> end
global function sg_query_pass_state(pass: sg_pass): sg_resource_state <cimport,nodecl> end
global function sg_query_buffer_info(buf: sg_buffer): sg_buffer_info <cimport,nodecl> end
global function sg_query_image_info(img: sg_image): sg_image_info <cimport,nodecl> end
global function sg_query_shader_info(shd: sg_shader): sg_shader_info <cimport,nodecl> end
global function sg_query_pipeline_info(pip: sg_pipeline): sg_pipeline_info <cimport,nodecl> end
global function sg_query_pass_info(pass: sg_pass): sg_pass_info <cimport,nodecl> end
global function sg_query_buffer_desc(buf: sg_buffer): sg_buffer_desc <cimport,nodecl> end
global function sg_query_image_desc(img: sg_image): sg_image_desc <cimport,nodecl> end
global function sg_query_shader_desc(shd: sg_shader): sg_shader_desc <cimport,nodecl> end
global function sg_query_pipeline_desc(pip: sg_pipeline): sg_pipeline_desc <cimport,nodecl> end
global function sg_query_pass_desc(pass: sg_pass): sg_pass_desc <cimport,nodecl> end
global function sg_query_buffer_defaults(desc: *sg_buffer_desc): sg_buffer_desc <cimport,nodecl> end
global function sg_query_image_defaults(desc: *sg_image_desc): sg_image_desc <cimport,nodecl> end
global function sg_query_shader_defaults(desc: *sg_shader_desc): sg_shader_desc <cimport,nodecl> end
global function sg_query_pipeline_defaults(desc: *sg_pipeline_desc): sg_pipeline_desc <cimport,nodecl> end
global function sg_query_pass_defaults(desc: *sg_pass_desc): sg_pass_desc <cimport,nodecl> end
global function sg_alloc_buffer(): sg_buffer <cimport,nodecl> end
global function sg_alloc_image(): sg_image <cimport,nodecl> end
global function sg_alloc_shader(): sg_shader <cimport,nodecl> end
global function sg_alloc_pipeline(): sg_pipeline <cimport,nodecl> end
global function sg_alloc_pass(): sg_pass <cimport,nodecl> end
global function sg_dealloc_buffer(buf: sg_buffer): void <cimport,nodecl> end
global function sg_dealloc_image(img: sg_image): void <cimport,nodecl> end
global function sg_dealloc_shader(shd: sg_shader): void <cimport,nodecl> end
global function sg_dealloc_pipeline(pip: sg_pipeline): void <cimport,nodecl> end
global function sg_dealloc_pass(pass: sg_pass): void <cimport,nodecl> end
global function sg_init_buffer(buf: sg_buffer, desc: *sg_buffer_desc): void <cimport,nodecl> end
global function sg_init_image(img: sg_image, desc: *sg_image_desc): void <cimport,nodecl> end
global function sg_init_shader(shd: sg_shader, desc: *sg_shader_desc): void <cimport,nodecl> end
global function sg_init_pipeline(pip: sg_pipeline, desc: *sg_pipeline_desc): void <cimport,nodecl> end
global function sg_init_pass(pass: sg_pass, desc: *sg_pass_desc): void <cimport,nodecl> end
global function sg_uninit_buffer(buf: sg_buffer): void <cimport,nodecl> end
global function sg_uninit_image(img: sg_image): void <cimport,nodecl> end
global function sg_uninit_shader(shd: sg_shader): void <cimport,nodecl> end
global function sg_uninit_pipeline(pip: sg_pipeline): void <cimport,nodecl> end
global function sg_uninit_pass(pass: sg_pass): void <cimport,nodecl> end
global function sg_fail_buffer(buf: sg_buffer): void <cimport,nodecl> end
global function sg_fail_image(img: sg_image): void <cimport,nodecl> end
global function sg_fail_shader(shd: sg_shader): void <cimport,nodecl> end
global function sg_fail_pipeline(pip: sg_pipeline): void <cimport,nodecl> end
global function sg_fail_pass(pass: sg_pass): void <cimport,nodecl> end
global function sg_setup_context(): sg_context <cimport,nodecl> end
global function sg_activate_context(ctx_id: sg_context): void <cimport,nodecl> end
global function sg_discard_context(ctx_id: sg_context): void <cimport,nodecl> end
global function sg_d3d11_device(): pointer <cimport,nodecl> end
global function sg_mtl_device(): pointer <cimport,nodecl> end
global function sg_mtl_render_command_encoder(): pointer <cimport,nodecl> end
global function sgp_setup(desc: *sgp_desc): void <cimport,nodecl> end
global function sgp_shutdown(): void <cimport,nodecl> end
global function sgp_is_valid(): boolean <cimport,nodecl> end
global function sgp_get_last_error(): sgp_error <cimport,nodecl> end
global function sgp_get_error_message(error: sgp_error): cstring <cimport,nodecl> end
global function sgp_make_pipeline(desc: *sgp_pipeline_desc): sg_pipeline <cimport,nodecl> end
global function sgp_begin(width: cint, height: cint): void <cimport,nodecl> end
global function sgp_flush(): void <cimport,nodecl> end
global function sgp_end(): void <cimport,nodecl> end
global function sgp_project(left: float32, right: float32, top: float32, bottom: float32): void <cimport,nodecl> end
global function sgp_reset_project(): void <cimport,nodecl> end
global function sgp_push_transform(): void <cimport,nodecl> end
global function sgp_pop_transform(): void <cimport,nodecl> end
global function sgp_reset_transform(): void <cimport,nodecl> end
global function sgp_translate(x: float32, y: float32): void <cimport,nodecl> end
global function sgp_rotate(theta: float32): void <cimport,nodecl> end
global function sgp_rotate_at(theta: float32, x: float32, y: float32): void <cimport,nodecl> end
global function sgp_scale(sx: float32, sy: float32): void <cimport,nodecl> end
global function sgp_scale_at(sx: float32, sy: float32, x: float32, y: float32): void <cimport,nodecl> end
global function sgp_set_pipeline(pipeline: sg_pipeline): void <cimport,nodecl> end
global function sgp_reset_pipeline(): void <cimport,nodecl> end
global function sgp_set_uniform(data: pointer, size: uint32): void <cimport,nodecl> end
global function sgp_reset_uniform(): void <cimport,nodecl> end
global function sgp_set_blend_mode(blend_mode: sgp_blend_mode): void <cimport,nodecl> end
global function sgp_reset_blend_mode(): void <cimport,nodecl> end
global function sgp_set_color(r: float32, g: float32, b: float32, a: float32): void <cimport,nodecl> end
global function sgp_reset_color(): void <cimport,nodecl> end
global function sgp_set_image(channel: cint, image: sg_image): void <cimport,nodecl> end
global function sgp_unset_image(channel: cint): void <cimport,nodecl> end
global function sgp_reset_image(channel: cint): void <cimport,nodecl> end
global function sgp_viewport(x: cint, y: cint, w: cint, h: cint): void <cimport,nodecl> end
global function sgp_reset_viewport(): void <cimport,nodecl> end
global function sgp_scissor(x: cint, y: cint, w: cint, h: cint): void <cimport,nodecl> end
global function sgp_reset_scissor(): void <cimport,nodecl> end
global function sgp_reset_state(): void <cimport,nodecl> end
global function sgp_clear(): void <cimport,nodecl> end
global function sgp_draw_points(points: *sgp_point, count: uint32): void <cimport,nodecl> end
global function sgp_draw_point(x: float32, y: float32): void <cimport,nodecl> end
global function sgp_draw_lines(lines: *sgp_line, count: uint32): void <cimport,nodecl> end
global function sgp_draw_line(ax: float32, ay: float32, bx: float32, by: float32): void <cimport,nodecl> end
global function sgp_draw_lines_strip(points: *sgp_point, count: uint32): void <cimport,nodecl> end
global function sgp_draw_filled_triangles(triangles: *sgp_triangle, count: uint32): void <cimport,nodecl> end
global function sgp_draw_filled_triangle(ax: float32, ay: float32, bx: float32, by: float32, cx: float32, cy: float32): void <cimport,nodecl> end
global function sgp_draw_filled_triangles_strip(points: *sgp_point, count: uint32): void <cimport,nodecl> end
global function sgp_draw_filled_rects(rects: *sgp_rect, count: uint32): void <cimport,nodecl> end
global function sgp_draw_filled_rect(x: float32, y: float32, w: float32, h: float32): void <cimport,nodecl> end
global function sgp_draw_textured_rects(rects: *sgp_rect, count: uint32): void <cimport,nodecl> end
global function sgp_draw_textured_rect(x: float32, y: float32, w: float32, h: float32): void <cimport,nodecl> end
global function sgp_draw_textured_rects_ex(channel: cint, rects: *sgp_textured_rect, count: uint32): void <cimport,nodecl> end
global function sgp_draw_textured_rect_ex(channel: cint, dest_rect: sgp_rect, src_rect: sgp_rect): void <cimport,nodecl> end
global function sgp_query_state(): *sgp_state <cimport,nodecl> end
global function sgp_query_desc(): sgp_desc <cimport,nodecl> end
global function sapp_isvalid(): boolean <cimport,nodecl> end
global function sapp_width(): cint <cimport,nodecl> end
global function sapp_widthf(): float32 <cimport,nodecl> end
global function sapp_height(): cint <cimport,nodecl> end
global function sapp_heightf(): float32 <cimport,nodecl> end
global function sapp_color_format(): cint <cimport,nodecl> end
global function sapp_depth_format(): cint <cimport,nodecl> end
global function sapp_sample_count(): cint <cimport,nodecl> end
global function sapp_high_dpi(): boolean <cimport,nodecl> end
global function sapp_dpi_scale(): float32 <cimport,nodecl> end
global function sapp_show_keyboard(show: boolean): void <cimport,nodecl> end
global function sapp_keyboard_shown(): boolean <cimport,nodecl> end
global function sapp_is_fullscreen(): boolean <cimport,nodecl> end
global function sapp_toggle_fullscreen(): void <cimport,nodecl> end
global function sapp_show_mouse(show: boolean): void <cimport,nodecl> end
global function sapp_mouse_shown(): boolean <cimport,nodecl> end
global function sapp_lock_mouse(lock: boolean): void <cimport,nodecl> end
global function sapp_mouse_locked(): boolean <cimport,nodecl> end
global function sapp_set_mouse_cursor(cursor: sapp_mouse_cursor): void <cimport,nodecl> end
global function sapp_get_mouse_cursor(): sapp_mouse_cursor <cimport,nodecl> end
global function sapp_userdata(): pointer <cimport,nodecl> end
global function sapp_query_desc(): sapp_desc <cimport,nodecl> end
global function sapp_request_quit(): void <cimport,nodecl> end
global function sapp_cancel_quit(): void <cimport,nodecl> end
global function sapp_quit(): void <cimport,nodecl> end
global function sapp_consume_event(): void <cimport,nodecl> end
global function sapp_frame_count(): uint64 <cimport,nodecl> end
global function sapp_frame_duration(): float64 <cimport,nodecl> end
global function sapp_set_clipboard_string(str: cstring): void <cimport,nodecl> end
global function sapp_get_clipboard_string(): cstring <cimport,nodecl> end
global function sapp_set_window_title(str: cstring): void <cimport,nodecl> end
global function sapp_set_icon(icon_desc: *sapp_icon_desc): void <cimport,nodecl> end
global function sapp_get_num_dropped_files(): cint <cimport,nodecl> end
global function sapp_get_dropped_file_path(index: cint): cstring <cimport,nodecl> end
global function sapp_run(desc: *sapp_desc): void <cimport,nodecl> end
global function sapp_egl_get_display(): pointer <cimport,nodecl> end
global function sapp_egl_get_context(): pointer <cimport,nodecl> end
global function sapp_html5_ask_leave_site(ask: boolean): void <cimport,nodecl> end
global function sapp_html5_get_dropped_file_size(index: cint): uint32 <cimport,nodecl> end
global function sapp_html5_fetch_dropped_file(request: *sapp_html5_fetch_request): void <cimport,nodecl> end
global function sapp_metal_get_device(): pointer <cimport,nodecl> end
global function sapp_metal_get_renderpass_descriptor(): pointer <cimport,nodecl> end
global function sapp_metal_get_drawable(): pointer <cimport,nodecl> end
global function sapp_macos_get_window(): pointer <cimport,nodecl> end
global function sapp_ios_get_window(): pointer <cimport,nodecl> end
global function sapp_d3d11_get_device(): pointer <cimport,nodecl> end
global function sapp_d3d11_get_device_context(): pointer <cimport,nodecl> end
global function sapp_d3d11_get_swap_chain(): pointer <cimport,nodecl> end
global function sapp_d3d11_get_render_target_view(): pointer <cimport,nodecl> end
global function sapp_d3d11_get_depth_stencil_view(): pointer <cimport,nodecl> end
global function sapp_win32_get_hwnd(): pointer <cimport,nodecl> end
global function sapp_wgpu_get_device(): pointer <cimport,nodecl> end
global function sapp_wgpu_get_render_view(): pointer <cimport,nodecl> end
global function sapp_wgpu_get_resolve_view(): pointer <cimport,nodecl> end
global function sapp_wgpu_get_depth_stencil_view(): pointer <cimport,nodecl> end
global function sapp_android_get_native_activity(): pointer <cimport,nodecl> end
global function sargs_setup(desc: *sargs_desc): void <cimport,nodecl> end
global function sargs_shutdown(): void <cimport,nodecl> end
global function sargs_isvalid(): boolean <cimport,nodecl> end
global function sargs_exists(key: cstring): boolean <cimport,nodecl> end
global function sargs_value(key: cstring): cstring <cimport,nodecl> end
global function sargs_value_def(key: cstring, def: cstring): cstring <cimport,nodecl> end
global function sargs_equals(key: cstring, val: cstring): boolean <cimport,nodecl> end
global function sargs_boolean(key: cstring): boolean <cimport,nodecl> end
global function sargs_find(key: cstring): cint <cimport,nodecl> end
global function sargs_num_args(): cint <cimport,nodecl> end
global function sargs_key_at(index: cint): cstring <cimport,nodecl> end
global function sargs_value_at(index: cint): cstring <cimport,nodecl> end
global SGP_BATCH_OPTIMIZER_DEPTH: cint <comptime> = 8
global SGP_UNIFORM_CONTENT_SLOTS: cint <comptime> = 4
global SGP_TEXTURE_SLOTS: cint <comptime> = 4
global function sapp_sgcontext(): sg_context_desc
  local desc: sg_context_desc
  desc.color_format = (@sg_pixel_format)(sapp_color_format())
  desc.depth_format = (@sg_pixel_format)(sapp_depth_format())
  desc.sample_count = sapp_sample_count()
  desc.metal.device = sapp_metal_get_device()
  desc.metal.renderpass_descriptor_cb = sapp_metal_get_renderpass_descriptor
  desc.metal.drawable_cb = sapp_metal_get_drawable
  desc.d3d11.device = sapp_d3d11_get_device()
  desc.d3d11.device_context = sapp_d3d11_get_device_context()
  desc.d3d11.render_target_view_cb = sapp_d3d11_get_render_target_view
  desc.d3d11.depth_stencil_view_cb = sapp_d3d11_get_depth_stencil_view
  desc.wgpu.device = sapp_wgpu_get_device()
  desc.wgpu.render_view_cb = sapp_wgpu_get_render_view
  desc.wgpu.resolve_view_cb = sapp_wgpu_get_resolve_view
  desc.wgpu.depth_stencil_view_cb = sapp_wgpu_get_depth_stencil_view
  return desc
end
