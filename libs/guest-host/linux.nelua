--------------------------------------------------------------------------------
-- Bindings

global O_RDWR: cint <cimport,cinclude'<fcntl.h>',const>
global function open(file: cstring, oflag: cint, mode: cuint): cint <cimport,cinclude'<fcntl.h>'> end
global function close(fd: cint): cint <cimport,cinclude'<unistd.h>'> end
global function read(fd: cint, buf: pointer, n: usize): isize <cimport,cinclude'<unistd.h>'> end
global function write(fd: cint, buf: pointer, n: usize): isize <cimport,cinclude'<unistd.h>'> end
global function lseek(fd: cint, offset: isize, whence: cint): isize <cimport,cinclude'<unistd.h>'> end
global function ftruncate(fd: cint, length: isize): cint <cimport,cinclude'<unistd.h>'> end
global function fsync(fd: cint): cint <cimport,cinclude'<unistd.h>'> end
global function ioctl(fd: cint, request: usize, ...: cvarargs): cint <cimport,cinclude'<sys/ioctl.h>'> end
global function getenv(name: cstring): cstring <cimport,cinclude'<stdlib.h>'> end
global function chmod(pathname: cstring, mode: cint): cint <cimport,cinclude'<sys/stat.h>'> end

global PROT_READ: cint <cimport,cinclude'<sys/mman.h>'>
global PROT_WRITE: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_ANONYMOUS: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_SHARED: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_FIXED_NOREPLACE: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_POPULATE: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_HUGETLB: cint <cimport,cinclude'<sys/mman.h>'>
global MAP_FAILED: pointer <cimport,cinclude'<sys/mman.h>'>

global SEEK_SET: cint <cimport,cinclude'<stdlib.h>'>
global SEEK_END: cint <cimport,cinclude'<stdlib.h>'>

global function mmap(addr: pointer, len: csize, prot: cint, flags: cint, fd: cint, offset: clong): pointer <cimport,cinclude'<sys/mman.h>'> end
global function munmap(addr: pointer, len: csize): cint <cimport,cinclude'<sys/mman.h>'> end
global function exit(status: cint): void <cimport,cinclude'<stdlib.h>'> end

--------------------------------------------------------------------------------
-- Utilities

require 'stringbuilder'

global function get_cmdline(): string
  local fd: cint = open('/proc/self/cmdline')
  if fd < 0 then return '' end
  defer close(fd) end
  local sb: stringbuilder
  repeat
    local buf: [256]byte
    local nread: isize = read(fd, &buf, #buf)
    if nread > 0 then
      sb:write((@string){data=&buf, size=nread})
    end
  until nread == 0
  return sb:promote()
end
