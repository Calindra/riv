-- This file contains code related to machine being emulated.

require 'io'
require 'cartesi'
require 'keccak'

require 'riv_types'
require 'macros'

global riv_paddr_base: type <using> = @enum(uint64) {
  RIV_PADDR_RAM        = 0x80000000,
  RIV_PADDR_ROOTFS     = 0x80000000000000,
  RIV_PADDR_CARTRIDGE  = 0x90000000000000,
  RIV_PADDR_REPLAYLOG   = 0xa0000000000000,
}

global RIV_MMIOSIZE_RAM: uint64 <comptime> = 128*1024*1024
global RIV_MMIOSIZE_CARTRIDGE: uint64< comptime> = 8*1024*1024
global RIV_MMIOSIZE_REPLAYLOG: uint64< comptime> = 2*1024*1024

--------------------------------------------------------------------------------

-- Macro to check if a cm_* call was a success.
## function cm_assert(callnode)
  do
    local errmsg: cstring
    -- appends `errmsg` to the call arguments of `a`
    ## local callargs, callname = callnode[1], callnode[2][1]
    ## table.insert(callargs, aster.UnaryOp{"ref", aster.Id{"errmsg"}})
    local result: auto = #[callnode]#
    if errmsg then
      error(#[callname..': ']#..errmsg)
    elseif result ~= 0 then
      error(#[callname..': failed']#)
    end
  end
## end

--------------------------------------------------------------------------------

-- Machine.
global rivemu_machine = @record{
  machine: *cm_machine,
  mmio_paddr: uint64,
  mmio_driver: riv_mmio_driver,
  mmio_device: riv_mmio_device
}

-- Creates a new machine.
function rivemu_machine.create(entrypoint: string, cartridge_filename: string, replaylog_filename: string): rivemu_machine
  -- get default config
  local defconfig: *cm_machine_config
  cm_assert!(cm_get_default_config(&defconfig))
  defer cm_delete_machine_config(defconfig) end

  -- rootfs flash drive
  local flash_drive_entries: [8]cm_memory_range_config
  local flash_drive_count: cint = 0
  flash_drive_entries[0] = {
    start = RIV_PADDR_ROOTFS,
    length = (@uint64)(-1),
    image_filename = "./rootfs/rootfs.ext2",
  }
  flash_drive_count = flash_drive_count + 1

  -- cartridge flash drive
  flash_drive_entries[flash_drive_count] = {
    start = RIV_PADDR_CARTRIDGE,
    length = RIV_MMIOSIZE_CARTRIDGE,
  }
  flash_drive_count = flash_drive_count + 1

  -- event log flash drive
  flash_drive_entries[flash_drive_count] = {
    start = RIV_PADDR_REPLAYLOG,
    length = RIV_MMIOSIZE_REPLAYLOG,
  }
  flash_drive_count = flash_drive_count + 1

  -- bootargs
  local bootargs: string <close> = "console=hvc0 \z
    rootfstype=ext2 root=/dev/mtdblock0 \z
    rw quiet \z
    swiotlb=noforce \z
    init=/opt/cartesi/bin/init \z
    mtdparts=flash.0:-(root) -- " .. entrypoint

  -- set config
  local config: cm_machine_config = $defconfig
  config.ram = {
    image_filename = './kernel/linux.bin',
    length = RIV_MMIOSIZE_RAM
  }
  config.rom = {
    image_filename = './kernel/rom.bin',
    bootargs = bootargs
  }
  config.htif = {
    yield_automatic = true,
  }
  config.flash_drive = {
    count = flash_drive_count,
    entry = &flash_drive_entries,
  }

  -- create the machine
  local self: rivemu_machine
  cm_assert!(cm_create_machine(config, cm_machine_runtime_config{}, &self.machine))

  -- write cartridge
  if #cartridge_filename > 0 then
    local file: filestream <close> = fn_assert!(io.open(cartridge_filename, 'rb'))
    local contents: string <close> = fn_assert!(file:read('a'))
    cm_assert!(cm_write_memory(self.machine, RIV_PADDR_CARTRIDGE, contents.data, contents.size))
  end

  -- write event log
  if #replaylog_filename > 0 then
    local file: filestream <close> = fn_assert!(io.open(replaylog_filename, 'rb'))
    local contents: string <close> = fn_assert!(file:read('a'))
    cm_assert!(cm_write_memory(self.machine, RIV_PADDR_REPLAYLOG, contents.data, contents.size))
  end

  return self
end

-- Destroy the machine.
function rivemu_machine:destroy(): void
  cm_delete_machine(self.machine)
  $self = {}
end

-- Check if the machine is halted.
function rivemu_machine:is_halted(): boolean
  local halted: boolean
  cm_assert!(cm_read_iflags_H(self.machine, &halted))
  return halted
end

-- Get the machine root hash as a hexadecimal string.
function rivemu_machine:get_root_hash(): [32]byte
  local hash: [32]byte
  cm_assert!(cm_get_root_hash(self.machine, &hash))
  return hash
end

-- Get machine yield reason.
function rivemu_machine:read_yield_reason(): uint16
  local data: uint64
  cm_assert!(cm_read_htif_tohost_data(self.machine, &data))
  return (@uint16)((data >> 32) & 0xffff)
end

-- Get machine yield data.
function rivemu_machine:read_yield_data(): uint32
  local data: uint64
  cm_assert!(cm_read_htif_tohost_data(self.machine, &data))
  return (@uint32)(data & 0xffffffff)
end

-- Get machine mcycle.
function rivemu_machine:read_mcycle(): uint64
  local mcycle: uint64
  cm_assert!(cm_read_mcycle(self.machine, &mcycle))
  return mcycle
end

-- Read machine memory.
function rivemu_machine:read_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_read_memory(self.machine, paddr, dest.data, dest.size))
end

-- Write machine memory.
function rivemu_machine:write_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_write_memory(self.machine, paddr, dest.data, dest.size))
end

-- Returns true if MMIO is ready to exchange data between driver and device.
function rivemu_machine:is_mmio_ready(): boolean
  return self.mmio_paddr ~= 0
end

-- Copy MMIO state from machine memory to host memory.
function rivemu_machine:_load_driver_mmio(): void
  assert(self.mmio_paddr ~= 0, 'mmio is not connected')
  local data: span(byte) = {data=(@*[0]byte)(&self.mmio_driver),size=#@riv_mmio_driver}
  self:read_memory(self.mmio_paddr + RIV_MMIOSTART_MMIO_DRIVER, data)
end

-- Store MMIO state from host memory to machine memory.
function rivemu_machine:_store_device_mmio(): void
  assert(self.mmio_paddr ~= 0, 'mmio is not connected')
  local data: span(byte) = {data=(@*[0]byte)(&self.mmio_device),size=#@riv_mmio_device}
  self:write_memory(self.mmio_paddr + RIV_MMIOSTART_MMIO_DEVICE, data)
end

-- Init MMIO link.
function rivemu_machine:_init_mmio(): void
  -- load MMIO from guest driver into host device
  self:_load_driver_mmio()
  -- copy header
  self.mmio_device.header = self.mmio_driver.header
  self.mmio_device.header.magic = RIV_DEVICE_MAGIC
end

-- Reset MMIO link.
function rivemu_machine:_reset_mmio(): void
  if self.mmio_paddr == 0 then return end
  self.mmio_paddr = 0
  self.mmio_device.header = {}
end

-- Check if MMIO link still valid.
function rivemu_machine:_check_mmio(): boolean
  if self.mmio_paddr == 0 then return false end
  local check_header: riv_mmio_header = self.mmio_device.header
  check_header.magic = RIV_DRIVER_MAGIC
  local driver_header: riv_mmio_header
  local data: span(byte) = {data=(@*[0]byte)(&driver_header),size=#@riv_mmio_header}
  self:read_memory(self.mmio_paddr + RIV_MMIOSTART_MMIO_DRIVER, data)
  return driver_header == check_header
end

-- Find MMIO physical address and link it.
function rivemu_machine:_setup_mmio(): boolean
  self:_reset_mmio()
  local header: riv_mmio_header
  local data: span(byte) = {data=(@*[0]byte)(&header),size=#@riv_mmio_header}
  for paddr: uint64 = RIV_PADDR_RAM,<RIV_PADDR_RAM+RIV_MMIOSIZE_RAM,RIV_MMIOSIZE_HUGEPAGE do
    self:read_memory(paddr + RIV_MMIOSTART_MMIO_DRIVER, data)
    if header.magic == RIV_DRIVER_MAGIC then -- connected
      assert(header.version == RIV_VERSION, 'unsupported RIV version')
      assert(header.features == 0, 'unsupported RIV features')
      self.mmio_paddr = paddr
      self:_init_mmio()
      return true
    end
  end
  return false
end

-- Run the machine.
function rivemu_machine:run(): CM_BREAK_REASON
  -- store MMIO from host device into guest driver
  if self:is_mmio_ready() then
    self:_store_device_mmio()
  end
  -- run the machine
  local break_reason: CM_BREAK_REASON
  cm_assert!(cm_machine_run(self.machine, (@uint64)(-1), &break_reason))
  -- load driver MMIO
  if break_reason == CM_BREAK_REASON_YIELDED_AUTOMATICALLY and self:read_yield_reason() == 0 then
    if self:_check_mmio() then -- is the MMIO still valid?
      -- load MMIO from guest driver into host device
      self:_load_driver_mmio()
    elseif not self:_setup_mmio() then -- try to initialize it
      error('unable to connect MMIO')
    end
  else -- for any other reason, MMIO becomes disconnected
    self:_reset_mmio()
  end
  -- return break reason
  return break_reason
end

-- Global machine.
global machine: rivemu_machine
