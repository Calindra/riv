require 'io'
require 'macros'
require 'keccak'

require '.machine'

global rivemu_iocard: type = @record{}

local outbuffer: [RIV_MMIOSIZE_INOUTBUFFER]byte
local outcard_data: span(byte)

function rivemu_iocard.setup(): void
  outcard_data.data = &outbuffer[0]
end

function rivemu_iocard.shutdown(): void
  -- nothing to do
end

function rivemu_iocard.update_outcard(): void
  outcard_data.size = math.min(machine.mmio_driver.outcard_len, RIV_MMIOSIZE_INOUTBUFFER)
  machine:read_memory(machine.mmio_paddr + RIV_MMIOSTART_INOUTBUFFER, outcard_data)
end

function rivemu_iocard.load_incard(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'rb'))
  local contents: string <close> = fn_assert!(file:read('a'))
  local data: span(byte) = {data=contents.data, size=math.min(RIV_MMIOSIZE_INOUTBUFFER, contents.size)}
  machine:write_memory(machine.mmio_paddr + RIV_MMIOSTART_INOUTBUFFER, data)
  machine.mmio_device.incard_len = data.size
  io.printf("[RIVEMU] Loaded input card '%s'\n", filename)
end

function rivemu_iocard.save_outhash(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  local hash: string <close> = hexhash(keccak256(outcard_data))
  fn_assert!(file:write(hash))
  io.printf("[RIVEMU] Saved output card hash '%s'\n", filename)
end

function rivemu_iocard.save_outcard(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  fn_assert!(file:write(outcard_data))
  io.printf("[RIVEMU] Saved output card data '%s'\n", filename)
end

function rivemu_iocard.print_outcard(): void
  local contents: string = {data=outcard_data.data, size=outcard_data.size}
  local hash: string <close> = hexhash(keccak256(outcard_data))
  io.printf([[
[RIVEMU] Outcard hash: %s
==== BEGIN OUTCARD ====
%s
==== END OUTCARD ====
]], hash, contents)
end
