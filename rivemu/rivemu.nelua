-- This file contains all code related to the audio subsystem.

##[[
pragma{
  nogc=true,
}
local projdir = fs.scriptdir(2)
libpath(fs.join(projdir, 'libriv', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'host', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'guest-host', '?.nelua'))

if ccinfo.is_emscripten then
  -- cartesi machine
  cflags('-I'..projdir..'/cartesi-machine-v0.15.2_wasm/include')
  ldflags('-L'..projdir..'/cartesi-machine-v0.15.2_wasm/lib')

  -- basic flags
  cflags('-sFULL_ES3 -sSTACK_SIZE=4MB -sTOTAL_MEMORY=384MB -sNO_DISABLE_EXCEPTION_CATCHING=1')

  -- miniaudio worklets
  -- cdefine 'MA_ENABLE_AUDIO_WORKLETS'
  -- cflags '-sAUDIO_WORKLET=1 -sWASM_WORKERS=1'
  -- cflags '-sASYNCIFY'
  cflags '-O3 -g0'

  -- debugging
  -- cflags '-Og -g'
  -- cflags '-sSAFE_HEAP'
  -- cflags '-sASSERTIONS=2'
  -- cflags '-fsanitize=undefined,address'

  -- embed files
  cflags('--embed-file '..projdir..'/rootfs/rootfs.ext2@rootfs/rootfs.ext2')
  cflags('--embed-file '..projdir..'/kernel/linux.bin@kernel/linux.bin')
  cflags('--embed-file '..projdir..'/kernel/rom.bin@kernel/rom.bin')

  -- export functions
  local export_functions = {
    '_main',
    '_quit',
    '_rivemu_start',
    '_rivemu_start_ex',
    '_rivemu_start_replay_ex',
    '_rivemu_stop',
    '_malloc',
    '_free',
  }
  cflags "-s ENVIRONMENT=web"
  cflags('-sEXPORTED_FUNCTIONS='..table.concat(export_functions,','))
  local export_runtime_functions = {
    'ccall',
    'cwrap',
  }
  cflags('-sEXPORTED_RUNTIME_METHODS='..table.concat(export_runtime_functions,','))
end
]]

require 'string'
require 'io'
require 'os'
require 'sokol'

require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'
require '.iocard'

local rivemu_options: type = @record{
  entrypoint_args: string,
  cartridge_filename: string,
  replay_filename: string,
  record_filename: string,
  verify_filename: string,
  incard_filename: string,
  outcard_filename: string,
  outhash_filename: string,
  screenshot_filename: string,
  recording: boolean,
  replaying: boolean,
  verifying: boolean,
  print_stats: boolean,
  print_hash: boolean,
  no_audio: boolean,
  no_video: boolean,
  no_yield: boolean,
  no_quit: boolean,
  wait_halt: boolean,
  print_final_hash: boolean,
  speed: float64,
  stop_frame: int64,
}

local function parse_options(): rivemu_options
  local opts: rivemu_options = {
    speed = 1.0,
    stop_frame = -1,
  }
  ## if ccinfo.is_wasm then
  opts.no_quit = true
  ## end
  for i=0,<sargs_num_args() do
    local a: string = sargs_key_at(i)
    if a == '-record' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.verifying, 'already verifying')
      opts.record_filename = sargs_value_at(i)
      opts.recording = true
    elseif a == '-replay' then
      assert(not opts.recording, 'already recording')
      assert(not opts.verifying, 'already verifying')
      opts.replay_filename = sargs_value_at(i)
      opts.replaying = true
    elseif a == '-verify' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.recording, 'already recording')
      opts.verify_filename = sargs_value_at(i)
      opts.verifying = true
    elseif a == '-cartridge' then
      opts.cartridge_filename = sargs_value_at(i)
    elseif a == '-load-incard' then
      opts.incard_filename = sargs_value_at(i)
    elseif a == '-save-outcard' then
      opts.outcard_filename = sargs_value_at(i)
    elseif a == '-save-outhash' then
      opts.outhash_filename = sargs_value_at(i)
    elseif a == '-save-screenshot' then
      opts.screenshot_filename = sargs_value_at(i)
    elseif a == '-speed' then
      local numstr: string = sargs_value_at(i)
      assert(numstr:find('^[0-9]+%.?[0-9]*$') > 0, 'malformed speed number')
      opts.speed = tonumber(numstr)
      assert(opts.speed > 0.0, 'speed must be positive')
    elseif a == '-stop-frame' then
      local numstr: string = sargs_value_at(i)
      assert(numstr:find('^[0-9]+$') > 0, 'malformed frame number')
      opts.stop_frame = tointeger(numstr)
    elseif a == '-no-audio' then
      opts.no_audio = true
    elseif a == '-no-video' then
      opts.no_video = true
    elseif a == '-no-yield' then
      opts.no_yield = true
      opts.no_video = true
      opts.no_audio = true
    elseif a == '-no-quit' then
      opts.no_quit = true
    elseif a == '-wait-halt' then
      opts.wait_halt = true
    elseif a == '-print-stats' then
      opts.print_stats = true
    elseif a == '-print-final-hash' then
      opts.print_final_hash = true
    elseif a == '-args' then
      opts.entrypoint_args = sargs_value_at(i)
    elseif a == '-help' or a == '--help' or a == '-h' then
      io.printf("Usage: rivemu [options]\n")
      io.write[[
-cartridge <filename>
  Cartridge to run.

-load-incard <filename>
  Load input card from a file.

-save-outcard <filename>
  Save output card to a file.

-save-outhash <filename>
  Save output card Keccak-256 hash to a file as a hexadecimal string.

-save-screenshot <filename>
  Save screenshot of last frame to a PNG image file.

-record <filename>
  Record game to an input log.

-replay <filename>
  Replay game from an input log.

-verify <filename>
  Replay game from an input log.

-speed <speed>
  Set replay speed.

-stop-frame <frame>
  Set frame to stop.

-no-audio
  Disable audio.

-no-video
  Disable video.

-no-yield
  Disable yield device when verifying (also disable audio and video).

-no-quit
  Don't quit when cartridge finishes.

-wait-halt
  Don't quit when RIV device is closed, wait for the machine to halt.

-print-stats
  Print frame rate statistics every second.

-print-final-hash
  Print final machine root hash.

-args <args>
  Append arguments when running the cartridge.
]]
      os.exit(0)
    else
      error(string.format("unknown command line option '%s'", a))
    end
  end
  return opts
end

function rivemu_options:entrypoint(): string
  local entrypoint_sb: stringbuilder <close>
  if #self.cartridge_filename > 0 then
    if self.verifying then
      entrypoint_sb:write('RIV_CARTRIDGE=/dev/mtdblock1 RIV_REPLAYLOG=/dev/mtdblock2 RIV_OUTCARD=/run/outcard ')
    else
      entrypoint_sb:write('RIV_CARTRIDGE=/dev/mtdblock1 ')
    end
    if self.stop_frame >= 0 then
      entrypoint_sb:write('RIV_STOP_FRAME=', self.stop_frame, ' ')
    end
    if self.no_yield then
      entrypoint_sb:write('RIV_NO_YIELD=y ')
    end
    entrypoint_sb:write('riv-run')
  end
  if #self.entrypoint_args > 0 then
    if #entrypoint_sb > 0 then
      entrypoint_sb:write(' ')
    end
    entrypoint_sb:write(self.entrypoint_args)
  end
  if self.verifying and self.no_yield then
    entrypoint_sb:write(';\z
      echo ==== BEGIN OUTCARD ====;\z
      cat /run/outcard;echo;\z
      echo ==== END OUTCARD ====')
  end
  return entrypoint_sb:promote()
end

local options: rivemu_options
local framelimiter: rivemu_framelimiter
local running: boolean

-- Initialize application.
local function setup(): void
  io.printf('[RIVEMU] Setup\n')

  -- init subsystems
  rivemu_iocard.setup()
  if not options.no_video then
    rivemu_video.setup()
  end
  if not options.no_audio then
    rivemu_audio.setup(options.speed)
  end
  rivemu_input.setup()
end

-- Reset the application.
local function reset(): void
  io.printf('[RIVEMU] Reset\n')

  -- reset subsystems
  rivemu_iocard.reset()
  if not options.no_video then
    rivemu_video.reset()
  end
  if not options.no_audio then
    rivemu_audio.reset()
  end
  rivemu_input.reset()

  machine:destroy()
  framelimiter = {}
  running = false
end

local function begin(): void
  io.printf('[RIVEMU] Start\n')
  -- initialize the machine
  local entrypoint: string <close> = options:entrypoint()
  machine = rivemu_machine.create(entrypoint, options.cartridge_filename, options.verify_filename)
  running = true

  if options.recording then -- start recording
    rivemu_input.start_recording()
  elseif options.replaying then -- start replaying
    rivemu_input.load_replay_from_file(options.replay_filename)
  end
end

local function startup(): void
  io.printf('[RIVEMU] Startup\n')
  setup()
## if not ccinfo.is_emscripten then
  begin()
## end
end

local function finish(): void
  if not running then return end
  running = false
  io.printf('[RIVEMU] Finish\n')

  if not options.no_audio then
    rivemu_audio.stop()
  end

  if not options.no_yield then
    if #options.outhash_filename > 0 then
      rivemu_iocard.save_outhash(options.outhash_filename)
    end
    if #options.outcard_filename > 0 then
      rivemu_iocard.save_outcard(options.outcard_filename)
    end
    rivemu_iocard.print_outcard()
  end

  if options.recording then
    rivemu_input.save_replay(options.record_filename)
  end

  ## if ccinfo.is_emscripten then
    do
      local rivlog_filename: string = options.replaying and options.replay_filename or options.record_filename
      local rivlog_file: filestream <close> = fn_assert!(io.open(rivlog_filename, 'rb'))
      local rivlog_data: string <close> = fn_assert!(rivlog_file:read('a'))
      local rivlog_ptr: *uint8 <nodce> = (@*uint8)(rivlog_data.data)
      local rivlog_len: int32 <nodce> = (@int32)(rivlog_data.size)

      local outcard_file: filestream <close> = fn_assert!(io.open(options.outcard_filename, 'rb'))
      local outcard_data: string <close> = fn_assert!(outcard_file:read('a'))
      local outcard_ptr: *uint8 <nodce> = (@*uint8)(outcard_data.data)
      local outcard_len: int32 <nodce> = (@int32)(outcard_data.size)

      cemit![[
    EM_ASM({
      let rivlog = HEAPU8.subarray($0, $0 + $1);
      let outcard = HEAPU8.subarray($2, $2 + $3);
      rivemu_on_finish(rivlog, outcard);
    }, rivlog_ptr, rivlog_len, outcard_ptr, outcard_len);
    ]]
  end
  ## end

  if options.wait_halt then
    io.printf('[RIVEMU] Waiting halt...\n')
    repeat until machine:run() == CM_BREAK_REASON_HALTED
  end

  if options.print_final_hash then
    local root_hash: string <close> = hexhash(machine:get_root_hash())
    io.printf('[RIVEMU] Cycles %d: %s\n', machine:read_mcycle(), root_hash)
  else
    io.printf('[RIVEMU] Cycles %d\n', machine:read_mcycle())
  end

  if not options.no_quit then
    sapp_quit()
  end
end

-- Terminate application.
local function shutdown(): void
  if running then
    finish()
  end

  io.printf('[RIVEMU] Shutdown\n')

  rivemu_iocard.shutdown()
  rivemu_input.shutdown()
  if not options.no_video then
    if #options.screenshot_filename > 0 then
      rivemu_video.save_screenshot(options.screenshot_filename)
    end
    rivemu_video.shutdown()
  end
  if not options.no_audio then
    rivemu_audio.shutdown()
  end

  machine:destroy()
end

-- Run the machine until it yields the next frame.
local function machine_frame(): void
  while true do
    switch machine:run() do
    case CM_BREAK_REASON_YIELDED_AUTOMATICALLY then
      -- execute control event from the yield
      switch machine:read_yield_data() do
      case RIV_CONTROL_OPEN then
        io.printf('[RIVEMU] Open RIV device\n')
        if #options.incard_filename > 0 then
          rivemu_iocard.load_incard(options.incard_filename)
        end
        -- reset input state
        rivemu_input.reset_keys_state()
      case RIV_CONTROL_CLOSE then
        io.printf('[RIVEMU] Close RIV device\n')
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        -- finish
        finish()
        return
      case RIV_CONTROL_PRESENT then
        -- poll audio
        if not options.no_audio then
          rivemu_audio.poll_commands()
        end
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        -- must break the loop so we can present the video
        return
      case RIV_CONTROL_FLUSH_AUDIO then
        -- poll audio
        if not options.no_audio then
          rivemu_audio.poll_commands()
        end
      else
        error 'unknown yield reason'
      end
    case CM_BREAK_REASON_HALTED then
      io.printf('[RIVEMU] Halted\n')
      finish()
      return
    else
      error('unexpected machine break reason')
      finish()
      return
    end
  end
end

-- Advance to the next frame.
local function advance_frame(): void
  if not running or machine:is_halted() then return end

  -- check if is the last replay frame
  local replay_finished: boolean = rivemu_input.is_replay_at_end()

  -- poll input events into machine device memory
  rivemu_input.poll()

  -- poll next frame from machine driver memory
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local mcycle_elapsed: uint64 = machine:read_mcycle() - mcycle_start

  if time_elapsed > 1.0/24.0 then
    io.stderr:printf('[RIVEMU] slow frame: %.2f ms, %.2f MHz\n', time_elapsed * 1000.0, (mcycle_elapsed / (time_elapsed * 1000000.0)))
  end

  -- force finish when replay ends
  if running and replay_finished then
    io.printf('[RIVEMU] Finish replay\n')
    finish()
  end

  if running then
    framelimiter.target_fps = machine.mmio_driver.framebuffer_desc.target_fps * options.speed
    if options.print_stats then
      framelimiter:print_stats(now, time_elapsed, mcycle_elapsed)
    end
  end
end

-- Poll next frame.
local function frame(): void
  if running then
    -- TODO: get display refresh rate
    local refresh_rate: float64 = 60
    if not machine:is_mmio_ready() then -- first frame
      advance_frame()
      if not options.no_audio then
        rivemu_audio.start()
      end
      ## if ccinfo.is_emscripten then
      do
        local width: int32 <nodce> = machine.mmio_driver.framebuffer_desc.width
        local height: int32 <nodce> = machine.mmio_driver.framebuffer_desc.height
        local num_frames: int32 <nodce> = rivemu_input.get_replay_frames()
          cemit![[
        EM_ASM({
          rivemu_on_begin($0, $1, $2);
        }, width, height, num_frames);
        ]]
      end
      ## end
      framelimiter.last_frame_time = os.now()
    elseif framelimiter.target_fps <= refresh_rate then
      if framelimiter:should_process_next_frame(os.now()) then
        advance_frame()
      end
    else -- advance many frames at once when FPS is too big
      local now_start: float64 = os.now()
      local now_end: float64 = now_start + (1.0 / refresh_rate)
      local dt: float64 = 1.0 / (refresh_rate * options.speed)
      for now=now_start,<now_end,dt do
        if framelimiter:should_process_next_frame(now) then
          -- advance to next frame
          advance_frame()
        end
      end
    end
  end
  -- poll audio
  if not options.no_audio then
    rivemu_audio.poll()
  end
  -- display the frame
  if not options.no_video then
    rivemu_video.present()
  end
end

local argc: cint <cimport'argc'>
local argv: *[0]cstring <cimport'argv'>
sargs_setup(sargs_desc{
  argc=argc,
  argv=argv
})

-- parse options
options = parse_options()

-- Application main loop.
sapp_run(sapp_desc{
  init_cb = startup,
  frame_cb = frame,
  cleanup_cb = shutdown,
  event_cb = rivemu_input.append_event,
  width = 0,
  height = 0,
  window_title = "RIVEMU",
  logger = {func = slog_func}
})

## if ccinfo.is_emscripten then

local function rivemu_start(ptr: *uint8, len: int32): void <cexport'rivemu_start'>
  reset()
  io.printf('[RIVEMU] Starting cartridge...\n')
  local contents: string = {data=(@*[0]byte)(ptr), size=len}
  do
    local cartridge_file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
    fn_assert!(cartridge_file:write(contents))
  end
  options.cartridge_filename = '/cartridge.sqfs'
  options.record_filename = '/replay.rivlog'
  options.outcard_filename = '/replay.outcard'
  options.recording = true
  begin()
end

local function rivemu_start_ex(ptr: *uint8, len: int32, args: cstring): void <cexport'rivemu_start_ex'>
  reset()
  io.printf('[RIVEMU] Starting cartridge...\n')
  local contents: string = {data=(@*[0]byte)(ptr), size=len}
  do
    local cartridge_file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
    fn_assert!(cartridge_file:write(contents))
  end
  options.cartridge_filename = '/cartridge.sqfs'
  options.record_filename = '/replay.rivlog'
  options.outcard_filename = '/replay.outcard'
  options.entrypoint_args = args
  options.recording = true
  begin()
end

local function rivemu_start_replay_ex(cartridge_ptr: *uint8, cartridge_len: int32, rivlog_ptr: *uint8, rivlog_len: int32, args: cstring): void <cexport'rivemu_start_replay_ex'>
  reset()
  io.printf('[RIVEMU] Starting cartridge...\n')
  do
    local contents: string = {data=(@*[0]byte)(cartridge_ptr), size=cartridge_len}
    local file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
    fn_assert!(file:write(contents))
  end
  do
    local contents: string = {data=(@*[0]byte)(rivlog_ptr), size=rivlog_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.rivlog', 'wb'))
    fn_assert!(file:write(contents))
  end
  options.cartridge_filename = '/cartridge.sqfs'
  options.replay_filename = '/replay.rivlog'
  options.outcard_filename = '/replay.outcard'
  options.entrypoint_args = args
  options.replaying = true
  begin()
end

local function rivemu_stop(url: cstring): void <cexport'rivemu_stop'>
  io.printf('[RIVEMU] Stopping cartridge...\n')
  finish()
end

local function quit(): void <cexport'quit'>
  sapp_quit()
end

## end
