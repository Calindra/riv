-- This file contains the entry point for RIVEMU.

##[[
-- Riv emulator does not use garbage collection
pragma{nogc=true}

-- Allow requiring third party libraries
local projdir = fs.scriptdir(2)
libpath(fs.join(projdir, 'libriv', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'host', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'guest-host', '?.nelua'))
if ccinfo.is_emscripten then
  cflags('-I'..projdir..'/cartesi-machine-v0.15.2_wasm/include')
  ldflags('-L'..projdir..'/cartesi-machine-v0.15.2_wasm/lib')
end
]]

require 'string'
require 'io'
require 'os'
require 'sokol'

require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'
require '.iocard'

local rivemu_options: type = @record{
  entrypoint_args: string,
  cartridge_filename: string,
  replay_filename: string,
  record_filename: string,
  verify_filename: string,
  verify_outhash: string,
  incard_filename: string,
  outcard_filename: string,
  outhash_filename: string,
  screenshot_filename: string,
  recording: boolean,
  replaying: boolean,
  verifying: boolean,
  print_stats: boolean,
  print_hash: boolean,
  no_audio: boolean,
  no_video: boolean,
  no_yield: boolean,
  no_quit: boolean,
  wait_halt: boolean,
  print_final_hash: boolean,
  speed: float64,
  stop_frame: int64,
}

local function parse_options(): rivemu_options
  local opts: rivemu_options = {
    speed = 1.0,
    stop_frame = -1,
  }
  for i: int32=0,<sargs_num_args() do
    local a: string = sargs_key_at(i)
    if a == '-record' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.verifying, 'already verifying')
      opts.record_filename = sargs_value_at(i)
      opts.recording = true
    elseif a == '-replay' then
      assert(not opts.recording, 'already recording')
      assert(not opts.verifying, 'already verifying')
      opts.replay_filename = sargs_value_at(i)
      opts.replaying = true
    elseif a == '-verify' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.recording, 'already recording')
      opts.verify_filename = sargs_value_at(i)
      opts.verifying = true
      opts.wait_halt = true
    elseif a == '-verify-outhash' then
      assert(opts.verifying, 'not verifying')
      opts.verify_outhash = sargs_value_at(i)
    elseif a == '-cartridge' then
      opts.cartridge_filename = sargs_value_at(i)
    elseif a == '-load-incard' then
      opts.incard_filename = sargs_value_at(i)
    elseif a == '-save-outcard' then
      opts.outcard_filename = sargs_value_at(i)
    elseif a == '-save-outhash' then
      opts.outhash_filename = sargs_value_at(i)
    elseif a == '-save-screenshot' then
      opts.screenshot_filename = sargs_value_at(i)
    elseif a == '-speed' then
      local numstr: string = sargs_value_at(i)
      assert(numstr:find('^[0-9]+%.?[0-9]*$') > 0, 'malformed speed number')
      opts.speed = tonumber(numstr)
      assert(opts.speed > 0.0, 'speed must be positive')
    elseif a == '-stop-frame' then
      local numstr: string = sargs_value_at(i)
      assert(numstr:find('^[0-9]+$') > 0, 'malformed frame number')
      opts.stop_frame = tointeger(numstr)
    elseif a == '-no-audio' then
      opts.no_audio = true
    elseif a == '-no-video' then
      opts.no_video = true
    elseif a == '-no-yield' then
      opts.no_yield = true
      opts.no_video = true
      opts.no_audio = true
    elseif a == '-no-quit' then
      opts.no_quit = true
    elseif a == '-wait-halt' then
      opts.wait_halt = true
    elseif a == '-print-stats' then
      opts.print_stats = true
    elseif a == '-print-final-hash' then
      opts.print_final_hash = true
    elseif a == '-args' then
      opts.entrypoint_args = sargs_value_at(i)
    elseif a == '-help' or a == '--help' or a == '-h' then
      io.printf("Usage: rivemu [options]\n")
      io.write[[
-cartridge=<filename>
  Cartridge to run.

-load-incard=<filename>
  Load input card from a file.

-save-outcard=<filename>
  Save output card to a file.

-save-outhash=<filename>
  Save output card SHA256 hash to a file as a hexadecimal string.

-save-screenshot=<filename>
  Save screenshot of last frame to a PNG image file.

-record=<filename>
  Record game to an input log.

-replay=<filename>
  Replay game from an input log.

-verify=<filename>
  Verify a game from an input log.

-verify-outhash=<hash>
  Verify a game output card hash.

-speed=<speed>
  Set replay speed.

-stop-frame=<frame>
  Set frame to stop.

-no-audio
  Disable audio.

-no-video
  Disable video.

-no-yield
  Disable yield device when verifying (also disable audio and video).

-no-quit
  Don't quit when cartridge finishes.

-wait-halt
  Don't quit when RIV device is closed, wait for the machine to halt.

-print-stats
  Print frame rate statistics every second.

-print-final-hash
  Print final machine root hash.

-args <args>
  Append arguments when running the cartridge.
]]
      os.exit(0)
    else
      error(string.format("unknown command line option '%s'", a))
    end
  end
  return opts
end

function rivemu_options:entrypoint(): string
  local entrypoint_sb: stringbuilder <close>
  if #self.cartridge_filename > 0 then
    if self.verifying then
      entrypoint_sb:write('RIV_CARTRIDGE=/dev/mtdblock1 RIV_REPLAYLOG=/dev/mtdblock2 RIV_OUTCARD=/run/outcard RIV_OUTHASH=/run/outhash ')
    else
      entrypoint_sb:write('RIV_CARTRIDGE=/dev/mtdblock1 ')
    end
    if self.stop_frame >= 0 then
      entrypoint_sb:write('RIV_STOP_FRAME=', self.stop_frame, ' ')
    end
    if self.no_yield then
      entrypoint_sb:write('RIV_NO_YIELD=y ')
    end
    entrypoint_sb:write('riv-run')
  end
  if self.verifying and #self.verify_outhash > 0 then
    entrypoint_sb:write('&& \z
      echo "', self.verify_outhash, ' /run/outcard" > /run/outcard.sha256sum && \z
      busybox sha256sum -cs /run/outcard.sha256sum && \z
      echo [RIVEMU] Outcard hash verification OK!!'
    )
  end
  if #self.entrypoint_args > 0 then
    if #entrypoint_sb > 0 then
      entrypoint_sb:write(' ')
    end
    entrypoint_sb:write(self.entrypoint_args)
  end
  return entrypoint_sb:promote()
end

local options: rivemu_options
local framelimiter: rivemu_framelimiter
local running: boolean
local loading: boolean
local started: boolean

-- Begin the machine entrypoint.
local function begin(): void
  -- initialize the machine
  local entrypoint: string <close> = options:entrypoint()
  machine = rivemu_machine.create(entrypoint, options.cartridge_filename, options.verify_filename)
  running = true

  if options.recording then -- start recording
    io.printf('[RIVEMU] Recording...\n')
    rivemu_input.start_recording()
  elseif options.replaying then -- start replaying
    io.printf('[RIVEMU] Replaying...\n')
    rivemu_input.load_replay_from_file(options.replay_filename)
  elseif options.verifying then
    io.printf('[RIVEMU] Verifying...\n')
  end
end

-- Initialize application.
local function startup(): void
  io.printf('[RIVEMU] Setup\n')

  started = true
  loading = true

  -- init subsystems
  rivemu_iocard.setup()
  if not options.no_video then
    rivemu_video.setup()
    rivemu_video.set_loading(true)
    rivemu_video.present()
  end
  if not options.no_audio then
    rivemu_audio.setup(options.speed)
    rivemu_audio.start()
    rivemu_audio.start_boot_sound()
  end
  rivemu_input.setup()

  ## if ccinfo.is_emscripten then
    cemit![[
      EM_ASM({
        window.dispatchEvent(new Event("rivemu_on_startup"));
      });
    ]]
  ## end

  begin()
end

local function finish(): void
  if not running then return end
  running = false

  if not options.no_audio then
    rivemu_audio.stop()
  end

  if not options.no_yield then
    if #options.outhash_filename > 0 then
      rivemu_iocard.save_outhash(options.outhash_filename)
    end
    if #options.outcard_filename > 0 then
      rivemu_iocard.save_outcard(options.outcard_filename)
    end
    rivemu_iocard.print_outcard()
  end

  if options.recording then
    rivemu_input.save_replay(options.record_filename)
  end

  if #options.screenshot_filename > 0 then
    rivemu_video.save_screenshot(options.screenshot_filename)
  end

  if options.wait_halt then
    io.printf('[RIVEMU] Waiting halt...\n')
    repeat until machine:run((@uint64)(-1)) == CM_BREAK_REASON_HALTED
  end

  if options.print_final_hash then
    local root_hash: string <close> = hexhash(machine:get_root_hash())
    io.printf('[RIVEMU] Cycles %d: %s\n', machine:read_mcycle(), root_hash)
  else
    io.printf('[RIVEMU] Cycles %d\n', machine:read_mcycle())
  end

  ## if ccinfo.is_emscripten then
    local rivlog_filename: string = options.replaying and options.replay_filename or options.record_filename
    local rivlog_file: filestream <close> = fn_assert!(io.open(rivlog_filename, 'rb'))
    local rivlog_data: string <close> = fn_assert!(rivlog_file:read('a'))
    local rivlog_ptr: *uint8 <nodce> = (@*uint8)(rivlog_data.data)
    local rivlog_len: int32 <nodce> = (@int32)(rivlog_data.size)

    local outcard_file: filestream <close> = fn_assert!(io.open(options.outcard_filename, 'rb'))
    local outcard_data: string <close> = fn_assert!(outcard_file:read('a'))
    local outcard_ptr: *uint8 <nodce> = (@*uint8)(outcard_data.data)
    local outcard_len: int32 <nodce> = (@int32)(outcard_data.size)

    local outhash_file: filestream <close> = fn_assert!(io.open(options.outhash_filename, 'rb'))
    local outhash_data: string <close> = fn_assert!(outhash_file:read('a'))
    local outhash_ptr: cstring <nodce> = (@cstring)(outhash_data.data)

    cemit![[
      EM_ASM({
        let rivlog = HEAPU8.subarray($0, $0 + $1);
        let outcard = HEAPU8.subarray($2, $2 + $3);
        let outhash = UTF8ToString($4);
        rivemu_on_finish(rivlog, outcard, outhash);
      }, rivlog_ptr, rivlog_len, outcard_ptr, outcard_len, outhash_ptr);
    ]]
  ## end

  if not options.no_quit then
    sapp_quit()
  end
end

-- Terminate application.
local function shutdown(): void
  if not started then return end
  io.printf('[RIVEMU] Shutdown\n')

  finish()

  rivemu_iocard.shutdown()
  rivemu_input.shutdown()
  if not options.no_video then
    rivemu_video.shutdown()
  end
  if not options.no_audio then
    rivemu_audio.shutdown()
  end

  machine:destroy()
  framelimiter = {}
  options = {}
  started = false
  loading = false

  ## if ccinfo.is_emscripten then
    cemit![[
      EM_ASM({
        window.dispatchEvent(new Event("rivemu_on_shutdown"));
      });
    ]]
  ## end
end

-- Run the machine until it yields the next frame.
local function machine_frame(): void
  while true do
    local mcycle_end: uint64 = (@uint64)(-1)
    if loading and not options.no_yield then
      -- advance just a few cycles to not freeze the application
      -- and display a loading screen
      mcycle_end = machine:read_mcycle() + 1024*1024
    end
    switch machine:run(mcycle_end) do
    case CM_BREAK_REASON_YIELDED_AUTOMATICALLY then
      -- execute control event from the yield
      switch machine:read_yield_data() do
      case RIV_CONTROL_OPEN then
        io.printf('[RIVEMU] Open RIV device\n')
        if #options.incard_filename > 0 then
          rivemu_iocard.load_incard(options.incard_filename)
        end
        -- reset input state
        rivemu_input.reset_keys_state()
      case RIV_CONTROL_CLOSE then
        io.printf('[RIVEMU] Close RIV device\n')
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        finish()
        return
      case RIV_CONTROL_PRESENT then
        if loading then
          loading = false
          rivemu_video.set_loading(false)
        end
        -- poll audio
        if not options.no_audio then
          rivemu_audio.poll_commands()
        end
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        -- must break the loop so we can present the video
        return
      case RIV_CONTROL_FLUSH_AUDIO then
        -- poll audio
        if not options.no_audio then
          rivemu_audio.poll_commands()
        end
      else
        error 'unknown yield reason'
      end
    case CM_BREAK_REASON_HALTED then
      io.printf('[RIVEMU] Halted\n')
      finish()
      return
    case CM_BREAK_REASON_REACHED_TARGET_MCYCLE then
      -- continue
      return
    else
      error('unexpected machine break reason')
      finish()
      return
    end
  end
end

-- Advance to the next frame.
local function advance_frame(): void
  if not running or machine:is_halted() then return end

  -- check if is the last replay frame
  local replay_finished: boolean = rivemu_input.is_replay_at_end()

  -- poll input events into machine device memory
  if not loading then
    rivemu_input.poll()
  end

  -- poll next frame from machine driver memory
  local was_loading: boolean = loading
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local last_mcycle: uint64 = machine:read_mcycle()
  local mcycle_elapsed: uint64 = last_mcycle - mcycle_start
  local target_fps: uint32 = machine.mmio_driver.framebuffer_desc.target_fps

  if not loading and target_fps > 0 and time_elapsed > 1.0/target_fps then
    io.stderr:printf('[RIVEMU] SLOW FRAME: frame=%d elapsed_time=%.2fms elapsed_cycles=%.2fM cpu_speed=%.2fMIPS\n',
      machine.mmio_driver.frame,
      time_elapsed * 1000.0,
      mcycle_elapsed / 1000000.0,
      mcycle_elapsed / (time_elapsed * 1000000.0))
  end

  -- local root_hash: string <close> = hexhash(machine:get_root_hash())
  -- print(root_hash)

  if running then
    framelimiter.target_fps = target_fps * options.speed
    if framelimiter:update_stats(now, time_elapsed, mcycle_elapsed) and options.print_stats then
      framelimiter:print_stats()
    end
  end

  -- notify when game begins
  if not loading and was_loading then
    ## if ccinfo.is_emscripten then
      local width: int32 <nodce> = machine.mmio_driver.framebuffer_desc.width
      local height: int32 <nodce> = machine.mmio_driver.framebuffer_desc.height
      local target_fps: int32 <nodce> = (@int32)(target_fps)
      local num_frames: int32 <nodce> = rivemu_input.get_replay_frames()
      cemit![[
        EM_ASM({
          rivemu_on_begin($0, $1, $2, $3);
        }, width, height, target_fps, num_frames);
      ]]
    ## end
  end

  -- notify frames
  if not loading and running then
    ## if ccinfo.is_emscripten then
      local outcard_data: span(byte) = rivemu_iocard.get_outcard_data()
      local ptr: *uint8 <nodce> = (@*uint8)(outcard_data.data)
      local len: int32 <nodce> = (@int32)(outcard_data.size)
      local frame: int32 <nodce> = (@int32)(machine.mmio_driver.frame)
      local fps: float64 <nodce> = framelimiter.fps
      local mips: float64 <nodce> = framelimiter.mips
      local cpu_usage: float64 <nodce> = framelimiter.cpu_usage
      local cycles: float64 <nodce> = last_mcycle
      cemit![[
        EM_ASM({
          let outcard = HEAPU8.subarray($0, $0 + $1);
          rivemu_on_frame(outcard, $2, $3, $4, $5, $6);
        }, ptr, len, frame, fps, mips, cpu_usage, cycles);
      ]]
    ## end
  end

  -- force finish when replay ends
  if running and replay_finished then
    io.printf('[RIVEMU] Finish replay\n')
    finish()
  end
end


local function notify_frame(): void
  if not running then return end
end

-- Poll next frame.
local function frame(): void
  if running then
    -- TODO: get display refresh rate
    local refresh_rate: float64 = 60
    if not machine:is_mmio_ready() then -- first frame
      advance_frame()
      framelimiter.last_frame_time = os.now()
    elseif framelimiter.target_fps <= refresh_rate then
      if framelimiter:should_process_next_frame(os.now()) then
        advance_frame()
      end
    else -- advance many frames at once when FPS is too big
      local now_start: float64 = os.now()
      local now_end: float64 = now_start + (1.0 / refresh_rate)
      local dt: float64 = 1.0 / (refresh_rate * options.speed)
      for now=now_start,<now_end,dt do
        if framelimiter:should_process_next_frame(now) then
          -- advance to next frame
          advance_frame()
        end
      end
    end
  end
  -- poll audio
  if not options.no_audio then
    rivemu_audio.poll()
  end
  -- display the frame
  if not options.no_video then
    rivemu_video.present()
  end
end

-- Initialize args
local argc: cint <cimport'argc'>
local argv: *[0]cstring <cimport'argv'>
sargs_setup(sargs_desc{
  argc=argc,
  argv=argv
})

-- Application main loop.
local function run()
  sapp_run(sapp_desc{
    init_cb = startup,
    frame_cb = frame,
    cleanup_cb = shutdown,
    event_cb = rivemu_input.append_event,
    width = 768,
    height = 768,
    html5_canvas_name = "canvas",
    html5_preserve_drawing_buffer = true,
    window_title = "RIVEMU",
    logger = {func = slog_func}
  })
end

## if not ccinfo.is_emscripten then

-- parse options and run
options = parse_options()
run()

## else

local function rivemu_start_record(cartridge_ptr: *uint8, cartridge_len: int32, incard_ptr: *uint8, incard_len: int32, args: cstring): void <cexport>
  assert(not running and not started, 'rivemu is running, please stop it first')
  options = parse_options()
  do
    local contents: string = {data=(@*[0]byte)(cartridge_ptr), size=cartridge_len}
    local file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
    fn_assert!(file:write(contents))
  end
  do
    local contents: string = {data=(@*[0]byte)(incard_ptr), size=incard_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.incard', 'wb'))
    fn_assert!(file:write(contents))
  end
  options.cartridge_filename = '/cartridge.sqfs'
  options.record_filename = '/replay.rivlog'
  options.incard_filename = '/replay.incard'
  options.outcard_filename = '/replay.outcard'
  options.outhash_filename = '/replay.outhash'
  options.entrypoint_args = args
  options.recording = true
  run()
end

local function rivemu_start_replay(cartridge_ptr: *uint8, cartridge_len: int32, incard_ptr: *uint8, incard_len: int32, args: cstring, rivlog_ptr: *uint8, rivlog_len: int32): void <cexport>
  assert(not running and not started, 'rivemu is running, please stop it first')
  options = parse_options()
  do
    local contents: string = {data=(@*[0]byte)(cartridge_ptr), size=cartridge_len}
    local file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
    fn_assert!(file:write(contents))
  end
  do
    local contents: string = {data=(@*[0]byte)(incard_ptr), size=incard_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.incard', 'wb'))
    fn_assert!(file:write(contents))
  end
  do
    local contents: string = {data=(@*[0]byte)(rivlog_ptr), size=rivlog_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.rivlog', 'wb'))
    fn_assert!(file:write(contents))
  end
  options.cartridge_filename = '/cartridge.sqfs'
  options.replay_filename = '/replay.rivlog'
  options.incard_filename = '/replay.incard'
  options.outcard_filename = '/replay.outcard'
  options.outhash_filename = '/replay.outhash'
  options.entrypoint_args = args
  options.replaying = true
  run()
end

local function rivemu_stop(url: cstring): boolean <cexport>
  if not started then return false end
  io.printf('[RIVEMU] Stop requested!\n')
  sapp_quit()
  return true
end

##[[
-- Disable default Nelua cflags for debug/release mode
require('nelua.cdefs').compilers_flags.emcc.cflags_devel = ""

-- Set required emscripten flags
cflags('-sFULL_ES3 -sSTACK_SIZE=4MB -sTOTAL_MEMORY=384MB')

-- debugging
-- cflags '-sSAFE_HEAP'
-- cflags '-sASSERTIONS=2'
-- cflags '-fsanitize=undefined,address'

-- Export functions to web environment
cflags('-sENVIRONMENT=web')
local export_functions = {
  '_main',
  '_rivemu_start_record',
  '_rivemu_start_replay',
  '_rivemu_stop',
  '_malloc',
  '_free',
}
cflags('-sEXPORTED_FUNCTIONS='..table.concat(export_functions,','))
local export_runtime_functions = {
  'ccall',
  'cwrap',
}
cflags('-sEXPORTED_RUNTIME_METHODS='..table.concat(export_runtime_functions,','))

-- Embed files
cflags('--embed-file '..projdir..'/rootfs/rootfs.ext2@rootfs/rootfs.ext2')
cflags('--embed-file '..projdir..'/kernel/linux.bin@kernel/linux.bin')
cflags('--embed-file '..projdir..'/kernel/rom.bin@kernel/rom.bin')
]]

## end
