-- This file contains code related to frame limiting and frame counting.

require 'io'
require 'math'

-- Frame limiter.
global rivemu_framelimiter: type = @record{
  target_fps: float64,
  last_frame_time: float64,

  -- used by print_stats
  time_elapsed_sum: float64,
  mcycle_elapsed_sum: uint64,
  frame_counter: uint64,
  stats_last_time: float64,

  fps: float64,
  mips: float64,
  cpu_usage: float64,
}

-- Return true when we should process the next frame.
function rivemu_framelimiter:should_process_next_frame(now: float64): boolean
  if self.target_fps == 0 then
    self.last_frame_time = now
    return true
  else
    local frame_delay: float64 = 1.0 / self.target_fps
    local wait_time: float64 = self.last_frame_time + frame_delay - now
    local wait_factor: float64 = wait_time / frame_delay
    -- the following attempts to stabilize fps
    -- while making wait time converge 0 between frames
    if wait_factor > 0.05 then return false end
    self.last_frame_time = now + math.min(wait_time, 0)*0.95
    return true
  end
end

-- Update statistics.
function rivemu_framelimiter:update_stats(now: float64, time_elapsed: float64, mcycle_elapsed: uint64): boolean
  self.frame_counter = self.frame_counter + 1
  self.time_elapsed_sum = self.time_elapsed_sum + time_elapsed
  self.mcycle_elapsed_sum = self.mcycle_elapsed_sum + mcycle_elapsed
  local last_time_elapsed: float64 = now - self.stats_last_time
  if last_time_elapsed >= 0.25 then
    self.fps = self.frame_counter / last_time_elapsed
    self.mips = self.mcycle_elapsed_sum / (self.time_elapsed_sum * 1000000.0)
    self.cpu_usage = (self.time_elapsed_sum * 100.0) / last_time_elapsed
    self.frame_counter = 0
    self.time_elapsed_sum = 0
    self.mcycle_elapsed_sum = 0
    self.stats_last_time = now
    return true
  end
  return false
end

-- Print the frame rate statistics to stderr every second.
function rivemu_framelimiter:print_fps(): void
  local frame: int64 = machine:is_mmio_ready() and (@int64)(machine.mmio_driver.frame) or -1
  io.printf('[RIVEMU] frame=%d fps=%.2f guest_cpu_clock=%.2fMIPS host_cpu_usage=%.2f%%\n',
    frame, self.fps, self.mips, self.cpu_usage)
end
