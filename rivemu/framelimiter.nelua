-- This file contains code related to frame limiting and frame counting.

require 'io'
require 'math'

-- Frame limiter.
global rivemu_framelimiter: type = @record{
  target_update_fps: float64,
  last_frame_time: float64,
  wait_time: float64,

  -- used by print_stats
  time_elapsed_sum: float64,
  mcycle_elapsed_sum: uint64,
  frame_sum: uint64,
  stats_last_time: float64,

  fps: float64,
  cpu_speed: float64,
  cpu_cost: float64,
  cpu_usage: float64,
  cpu_quota: float64,
}

-- Return true when we should process the next frame.
function rivemu_framelimiter:should_process_next_frame(now: float64): boolean
  if self.target_update_fps == 0 then
    self.last_frame_time = now
    return true
  else
    -- the following attempts to stabilize fps while trying to keep time reliable
    local target_frame_delay: float64 = 1.0 / self.target_update_fps
    local frame_delay: float64 = now - self.last_frame_time
    local wait_factor: float64 = (self.wait_time - frame_delay) / target_frame_delay
    if wait_factor > 0.05 then
      return false
    else
      self.last_frame_time = now
      if self.target_update_fps >= 60 then
        -- avoid accumulation too much time when we never skip
        self.wait_time = self.wait_time * 0.99
      end
      self.wait_time = self.wait_time - frame_delay + target_frame_delay
      return true
    end
  end
end

-- Update statistics.
function rivemu_framelimiter:update_stats(frame: uint64, now: float64, time_elapsed: float64, mcycle: uint64, mcycle_elapsed: uint64, target_fps: float64): boolean
  self.time_elapsed_sum = self.time_elapsed_sum + time_elapsed
  self.mcycle_elapsed_sum = self.mcycle_elapsed_sum + mcycle_elapsed
  if frame == 0 then return end -- keep accumulating because we are still loading
  self.frame_sum = self.frame_sum + 1
  local last_time_elapsed: float64 = now - self.stats_last_time
  if last_time_elapsed >= 0.25 or frame == 1 then
    self.fps = self.frame_sum / last_time_elapsed
    self.cpu_speed = self.mcycle_elapsed_sum / (self.time_elapsed_sum * 1000000.0)
    self.cpu_cost = target_fps * (self.mcycle_elapsed_sum / (self.frame_sum * 1000000.0))
    self.cpu_usage = (self.time_elapsed_sum * 100.0) / last_time_elapsed
    self.cpu_quota = 100.0 * (mcycle / (750*128000000.0))
    self.frame_sum = 0
    self.time_elapsed_sum = 0
    self.mcycle_elapsed_sum = 0
    self.stats_last_time = now
    return true
  end
  return false
end

-- Print the frame rate statistics every second.
function rivemu_framelimiter:print_stats(frame: uint64): void
  io.printf('[RIVEMU] frame=%d fps=%.2f cpu_cost=%.2fMIPS cpu_speed=%.2fMIPS cpu_usage=%.2f%% cpu_quota=%.2f%%\n',
    frame, self.fps, self.cpu_cost, self.cpu_speed, self.cpu_usage, self.cpu_quota)
end
