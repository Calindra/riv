-- This file contains all code related to the audio subsystem.

require 'string'
require 'io'
require 'os'
require 'arg'
require 'sokol'

require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'

-- Initialize application.
local function init(): void
  -- prepare cartridge drive and command line
  local cartridge: string = "./demos/snake.sqfs"
  local args: string <close> = string.concat(arg, " ")
  local entrypoint: string <close> = 'cartridge-run '..args

  -- initialize the machine
  machine = Machine.create(cartridge, entrypoint)

  -- init subsystems
  video.setup()
  audio.setup()
  input.setup()
end

-- Terminate application.
local function terminate(): void
  input.shutdown()
  video.shutdown()
  audio.shutdown()
  machine:destroy()
end

-- Run the machine until it yields the next frame.
local function machine_frame(): void
  while true do
    switch machine:run() do
    case CM_BREAK_REASON_HALTED then
      io.stderr:printf('Halted\n')
      io.stderr:printf('Cycles: %d\n', machine:read_mcycle())
      sapp_quit()
    case CM_BREAK_REASON_YIELDED_AUTOMATICALLY then
      -- cache machine MMIO into host memory
      machine:load_mmio()
      -- execute control event from the yield
      switch machine:read_yield_reason() do
      case RIV_CONTROL_PRESENT then
        -- video will be presented in frame function
        return
      case RIV_CONTROL_AUDIO then
        audio.control()
      else
        error 'unknown yield reason'
      end
    else
      io.stderr:printf('unexpected machine break reason\n')
      sapp_quit()
    end
  end
end

-- Poll next frame.
local function frame(): void
  -- poll next frame from machine
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local mcycle_elapsed: uint64 = machine:read_mcycle() - mcycle_start

  -- log fps
  framelimiter.log_fps(now, time_elapsed, mcycle_elapsed)

  -- display the frame
  video.present()

  -- limit fps
  framelimiter.limit_fps()
end

-- Poll keyboard/mouse input events.
local function event(event: *sapp_event): void
  input.poll(event)
end

-- Application main loop.
sapp_run(sapp_desc{
  init_cb = init,
  frame_cb = frame,
  cleanup_cb = terminate,
  event_cb = event,
  width = 320,
  height = 240,
  window_title = "RIVCM",
})
