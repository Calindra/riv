-- This file contains all code related to the audio subsystem.

##[[
pragma{
  nogc=true,
}
local projdir = fs.scriptdir(2)
libpath(fs.join(projdir, 'libriv', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'host', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'guest-host', '?.nelua'))

if ccinfo.is_emscripten then
  -- cartesi machine
  cflags('-I'..projdir..'/cartesi-machine-v0.15.2_wasm/include')
  ldflags('-L'..projdir..'/cartesi-machine-v0.15.2_wasm/lib')

  -- basic flags
  cflags('-sFULL_ES3 -sSTACK_SIZE=4MB -sTOTAL_MEMORY=384MB -sNO_DISABLE_EXCEPTION_CATCHING=1')

  -- miniaudio worklets
  -- cdefine 'MA_ENABLE_AUDIO_WORKLETS'
  -- cflags '-sAUDIO_WORKLET=1 -sWASM_WORKERS=1'
  -- cflags '-sASYNCIFY'
  cflags '-O3 -g0'

  -- debugging
  -- cflags '-Og -g'
  -- cflags '-sSAFE_HEAP'
  -- cflags '-sASSERTIONS=2'
  -- cflags '-fsanitize=undefined,address'

  -- embed files
  cflags('--embed-file '..projdir..'/rootfs/rootfs.ext2@rootfs/rootfs.ext2')
  cflags('--embed-file '..projdir..'/kernel/linux.bin@kernel/linux.bin')
  cflags('--embed-file '..projdir..'/kernel/rom.bin@kernel/rom.bin')
  cflags('--embed-file '..projdir..'/demos/antcopter/antcopter.sqfs@demos/antcopter/antcopter.sqfs')
  cflags('--embed-file '..projdir..'/demos/doom/doom.sqfs@demos/doom/doom.sqfs')
  cflags('--embed-file '..projdir..'/demos/snake/snake.sqfs@demos/snake/snake.sqfs')
  cflags('--embed-file '..projdir..'/antcopter.rivlog@antcopter.rivlog')
  cflags('--embed-file '..projdir..'/doom.rivlog@doom.rivlog')
  cflags('--embed-file '..projdir..'/snake.rivlog@snake.rivlog')
  cflags('--shell-file '..projdir..'/rivcm/shell_minimal.html')
end
]]

require 'string'
require 'io'
require 'os'
require 'sokol'

require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'
require '.iocard'

local rivcm_options: type = @record{
  entrypoint: string,
  cartridge_filename: string,
  replay_filename: string,
  record_filename: string,
  verify_filename: string,
  incard_filename: string,
  outcard_filename: string,
  outhash_filename: string,
  recording: boolean,
  replaying: boolean,
  verifying: boolean,
  print_stats: boolean,
  print_hash: boolean,
  no_audio: boolean,
  no_video: boolean,
  no_quit: boolean,
  wait_halt: boolean,
  print_final_hash: boolean,
  speed: float64,
}

local function parse_options(): rivcm_options
  local opts: rivcm_options = {
    speed = 1.0
  }
  local entrypoint_args: string
  for i=0,<sargs_num_args() do
    local a: string = sargs_key_at(i)
    if a == '-record' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.verifying, 'already verifying')
      opts.record_filename = sargs_value_at(i)
      opts.recording = true
    elseif a == '-replay' then
      assert(not opts.recording, 'already recording')
      assert(not opts.verifying, 'already verifying')
      opts.replay_filename = sargs_value_at(i)
      opts.replaying = true
    elseif a == '-verify' then
      assert(not opts.recording, 'already recording')
      assert(not opts.recording, 'already recording')
      opts.verify_filename = sargs_value_at(i)
      opts.verifying = true
    elseif a == '-cartridge' then
      opts.cartridge_filename = sargs_value_at(i)
    elseif a == '-load-incard' then
      opts.incard_filename = sargs_value_at(i)
    elseif a == '-save-outcard' then
      opts.outcard_filename = sargs_value_at(i)
    elseif a == '-save-outhash' then
      opts.outhash_filename = sargs_value_at(i)
    elseif a == '-speed' then
      local numstr: string = sargs_value_at(i)
      assert(numstr:find('^[0-9]+%.?[0-9]*$') > 0, 'malformed speed number')
      opts.speed = tonumber(numstr)
      assert(opts.speed > 0.0, 'speed must be positive')
    elseif a == '-no-audio' then
      opts.no_audio = true
    elseif a == '-no-video' then
      opts.no_video = true
    elseif a == '-no-quit' then
      opts.no_quit = true
    elseif a == '-wait-halt' then
      opts.wait_halt = true
    elseif a == '-print-stats' then
      opts.print_stats = true
    elseif a == '-print-final-hash' then
      opts.print_final_hash = true
    elseif a == '-args' then
      entrypoint_args = sargs_value_at(i)
    elseif a == '-help' or a == '--help' or a == '-h' then
      io.printf("Usage: rivcm [options]\n")
      io.write[[
-print-fps
  Print frame rate statistics every second.

-cartridge <filename>
  Cartridge to run.

-load-incard <filename>
  Load input card from a file.

-save-outcard <filename>
  Save output card to a file.

-save-outhash <filename>
  Save output card Keccak-256 hash to a file as a hexadecimal string.

-record <filename>
  Record game to an input log.

-replay <filename>
  Replay game from an input log.

-verify <filename>
  Replay game from an input log.

-speed <speed>
  Set replay speed.

-no-audio
  Disable audio.

-no-video
  Disable video.

-no-quit
  Don't quit when cartridge finishes.

-wait-halt
  Don't quit when RIV device is closed, wait for the machine to halt.
]]
      os.exit(0)
    else
      error(string.format("unknown command line option '%s'", a))
    end
  end
  local entrypoint_sb: stringbuilder <close>
  if #opts.cartridge_filename > 0 then
    if opts.verifying then
      entrypoint_sb:write('RUN_CARTRIDGE=/dev/mtdblock1 RUN_RIVLOG=/dev/mtdblock2 RUN_IOCARD=/run/iocard ')
    else
      entrypoint_sb:write('RUN_CARTRIDGE=/dev/mtdblock1 ')
    end
    entrypoint_sb:write('cartridge-run')
  end
  if #entrypoint_args > 0 then
    if #entrypoint_sb > 0 then
      entrypoint_sb:write(' ')
    end
    entrypoint_sb:write(entrypoint_args)
  end
  opts.entrypoint = entrypoint_sb:promote()
  return opts
end

local options: rivcm_options
local framelimiter: rivcm_framelimiter
local finished: boolean

-- Initialize application.
local function startup(): void
  io.printf('[RIVCM] Startup\n')

  -- initialize the machine
  machine = rivcm_machine.create(options.entrypoint, options.cartridge_filename, options.verify_filename)

  -- init subsystems
  rivcm_iocard.setup()
  if not options.no_video then
    rivcm_video.setup()
  end
  if not options.no_audio then
    rivcm_audio.setup(options.speed)
  end
  rivcm_input.setup()

  if options.recording then -- start recording
    rivcm_input.start_recording()
  elseif options.replaying then -- start replaying
    rivcm_input.load_replay_from_file(options.replay_filename)
  end
end

local function finish(): void
  finished = true

  if options.recording then
    rivcm_input.save_replay(options.record_filename)
  end

  if #options.outhash_filename > 0 then
    rivcm_iocard.save_outhash(options.outhash_filename)
  end
  if #options.outcard_filename > 0 then
    rivcm_iocard.save_outcard(options.outcard_filename)
  end
  rivcm_iocard.print_outcard()

  if options.wait_halt then
    io.printf('[RIVCM] Waiting halt...\n')
    repeat until machine:run() == CM_BREAK_REASON_HALTED
  end

  if options.print_final_hash then
    local root_hash: string <close> = hexhash(machine:get_root_hash())
    io.printf('[RIVCM] Cycles %d: %s\n', machine:read_mcycle(), root_hash)
  else
    io.printf('[RIVCM] Cycles %d\n', machine:read_mcycle())
  end

  if not options.no_quit then
    sapp_quit()
  end
end

-- Terminate application.
local function shutdown(): void
  if not finished then
    finish()
  end

  io.printf('[RIVCM] Shutdown\n')

  rivcm_iocard.shutdown()
  rivcm_input.shutdown()
  if not options.no_video then
    rivcm_video.shutdown()
  end
  if not options.no_audio then
    rivcm_audio.shutdown()
  end

  machine:destroy()
end

-- Run the machine until it yields the next frame.
local function machine_frame(): void
  while true do
    switch machine:run() do
    case CM_BREAK_REASON_YIELDED_AUTOMATICALLY then
      -- execute control event from the yield
      switch machine:read_yield_data() do
      case RIV_CONTROL_OPEN then
        io.printf('[RIVCM] Open RIV device\n')
        if #options.incard_filename > 0 then
          rivcm_iocard.load_incard(options.incard_filename)
        end
        -- reset input state
        rivcm_input.reset_state()
      case RIV_CONTROL_CLOSE then
        io.printf('[RIVCM] Close RIV device\n')
        -- copy output card from guest memory into host memory
        rivcm_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivcm_video.update_framebuffer()
        end
        -- finish
        finish()
        return
      case RIV_CONTROL_PRESENT then
        -- poll audio
        if not options.no_audio then
          rivcm_audio.poll_commands()
        end
        -- copy output card from guest memory into host memory
        rivcm_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivcm_video.update_framebuffer()
        end
        -- must break the loop so we can present the video
        return
      case RIV_CONTROL_FLUSH_AUDIO then
        -- poll audio
        if not options.no_audio then
          rivcm_audio.poll_commands()
        end
      else
        error 'unknown yield reason'
      end
    case CM_BREAK_REASON_HALTED then
      io.printf('[RIVCM] Halted\n')
      finish()
      return
    else
      error('unexpected machine break reason')
      finish()
      return
    end
  end
end

-- Advance to the next frame.
local function advance_frame(): void
  if finished or machine:is_halted() then return end

  -- check if is the last replay frame
  local replay_finished: boolean = rivcm_input.is_replay_at_end()

  -- poll input events into machine device memory
  rivcm_input.poll()

  -- poll next frame from machine driver memory
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local mcycle_elapsed: uint64 = machine:read_mcycle() - mcycle_start

  if time_elapsed > 1.0/24.0 then
    io.stderr:printf('[RIVCM] slow frame: %.2f ms, %.2f MHz\n', time_elapsed * 1000.0, (mcycle_elapsed / (time_elapsed * 1000000.0)))
  end

  -- force finish when replay ends
  if not finished and replay_finished then
    io.printf('[RIVCM] Finish replay\n')
    finish()
  end

  if not finished then
    framelimiter.target_fps = machine.mmio_driver.framebuffer_desc.target_fps * options.speed
    if options.print_stats then
      framelimiter:print_stats(now, time_elapsed, mcycle_elapsed)
    end
  end
end

-- Poll next frame.
local function frame(): void
  -- TODO: get display refresh rate
  local refresh_rate: float64 = 60
  if not machine:is_mmio_ready() then -- first frame
    advance_frame()
    framelimiter.last_frame_time = os.now()
  elseif framelimiter.target_fps <= refresh_rate then
    if framelimiter:should_process_next_frame(os.now()) then
      advance_frame()
    end
  else -- advance many frames at once when FPS is too big
    local now_start: float64 = os.now()
    local now_end: float64 = now_start + (1.0 / refresh_rate)
    local dt: float64 = 1.0 / (refresh_rate * options.speed)
    for now=now_start,<now_end,dt do
      if framelimiter:should_process_next_frame(now) then
        -- advance to next frame
        advance_frame()
      end
    end
  end
  -- poll audio
  if not options.no_audio then
    rivcm_audio.poll()
  end
  -- display the frame
  if not options.no_video then
    rivcm_video.present()
  end
end

local argc: cint <cimport'argc'>
local argv: *[0]cstring <cimport'argv'>
sargs_setup(sargs_desc{
  argc=argc,
  argv=argv
})

-- parse options
options = parse_options()

-- Application main loop.
sapp_run(sapp_desc{
  init_cb = startup,
  frame_cb = frame,
  cleanup_cb = shutdown,
  event_cb = rivcm_input.append_event,
  width = 768,
  height = 768,
  window_title = "RIVCM",

  html5_canvas_name = "canvas",
  -- html5_canvas_resize = true,
})
