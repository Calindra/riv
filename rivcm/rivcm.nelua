-- This file contains all code related to the audio subsystem.

require 'string'
require 'io'
require 'os'
require 'arg'
require 'sokol'
require 'vector'

require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'

-- Initialize application.
local function init(): void
  -- prepare cartridge drive and command line
  local cartridge: string = "./demos/snake.sqfs"
  local args: string <close> = string.concat(arg, " ")
  local entrypoint: string <close> = 'cartridge-run '..args

  -- initialize the machine
  machine = Machine.create(cartridge, entrypoint)

  -- init subsystems
  video.setup()
  audio.setup()
  input.setup()
end

-- Terminate application.
local function terminate(): void
  input.shutdown()
  video.shutdown()
  audio.shutdown()
  machine:destroy()
end

-- Run the machine until it yields the next frame.
local function machine_frame(): boolean
  while true do
    switch machine:run() do
    case CM_BREAK_REASON_YIELDED_AUTOMATICALLY then
      -- execute control event from the yield
      switch machine:read_yield_reason() do
      case RIV_CONTROL_PRESENT then
        -- video will be presented in frame function
        return true
      case RIV_CONTROL_AUDIO then
        audio.control()
      else
        error 'unknown yield reason'
      end
    case CM_BREAK_REASON_HALTED then
      io.stderr:printf('Halted\n')
      io.stderr:printf('Cycles: %d\n', machine:read_mcycle())
      sapp_quit()
      return
    else
      io.stderr:printf('unexpected machine break reason\n')
      sapp_quit()
      return
    end
  end
end

-- Poll next frame.
local function frame(): void
  -- poll input events into machine device memory
  input.poll()

  -- poll next frame from machine driver memory
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  local running: boolean  = machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local mcycle_elapsed: uint64 = machine:read_mcycle() - mcycle_start

  -- stop when machine is not running
  if not running then return end

  -- log fps
  framelimiter.log_fps(now, time_elapsed, mcycle_elapsed)

  -- display the frame
  video.present()

  -- limit fps
  framelimiter.limit_fps()
end

-- Application main loop.
sapp_run(sapp_desc{
  init_cb = init,
  frame_cb = frame,
  cleanup_cb = terminate,
  event_cb = input.append_event,
  width = 320,
  height = 240,
  window_title = "RIVCM",
})
