-- This file contains all code related to frame limiting and frame counting.

require 'io'
require 'math'

-- Frame limiter.
global riv_framelimiter: type = @record{
  max_fps: float64,
  last_frame_time: float64,

  -- used by print_stats
  time_elapsed_sum: float64,
  mcycle_elapsed_sum: uint64,
  frame_counter: uint64,
  stats_last_time: float64,
}

-- Return true when we should process the next frame.
function riv_framelimiter:should_process_next_frame(now: float64): boolean
  if self.max_fps == 0 then
    self.last_frame_time = now
    return true
  else
    local frame_delay: float64 = 1.0 / self.max_fps
    local wait_time: float64 = self.last_frame_time + frame_delay - now
    local wait_factor: float64 = wait_time / frame_delay
    -- the following attempts to stabilize fps
    -- while making wait time converge 0 between frames
    if wait_factor > 0.05 then return false end
    self.last_frame_time = now + math.min(wait_time, 0)*0.95
    return true
  end
end

-- Print the frame rate statistics to stderr every second.
function riv_framelimiter:print_stats(now: float64, time_elapsed: float64, mcycle_elapsed: uint64): void
  self.frame_counter = self.frame_counter + 1
  self.time_elapsed_sum = self.time_elapsed_sum + time_elapsed
  self.mcycle_elapsed_sum = self.mcycle_elapsed_sum + mcycle_elapsed
  local last_time_elapsed: float64 = now - self.stats_last_time
  if last_time_elapsed >= 1.0 then
    if not machine:is_halted() then
      local fps: float64 = self.frame_counter / last_time_elapsed
      local mips: float64 = self.mcycle_elapsed_sum / (self.time_elapsed_sum * 1000000.0)
      local cpu_usage: float64 = (self.time_elapsed_sum * 100.0) / last_time_elapsed
      io.printf('[RIVCM] frame=%d fps=%.2f guest_cpu_clock=%.2fMHz host_cpu_usage=%.2f%%\n',
        machine.mmio_driver.frame, fps / last_time_elapsed, mips, cpu_usage)
    end
    self.frame_counter = 0
    self.time_elapsed_sum = 0
    self.mcycle_elapsed_sum = 0
    self.stats_last_time = now
  end
end
